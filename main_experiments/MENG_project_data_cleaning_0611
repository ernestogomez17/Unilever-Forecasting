{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8cedebbe-2ff2-4b77-bd16-0c8e6e558a47",
   "metadata": {},
   "source": [
    "Please extend the work from notebook by adding more sensible features as part of external feature construction, aside from the existing datasets. The final format is in MTS format."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "desperate-simulation",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os, sys\n",
    "sys.path.append(os.path.abspath(\"../../\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5d5c25e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import logging\n",
    "logging.getLogger().setLevel(logging.DEBUG)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e30f234a",
   "metadata": {},
   "source": [
    "# Consider datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "11508be7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<module 'utilities.optimization.reader' from '/Users/dawn.duan/Library/CloudStorage/OneDrive-CanadianTire/Documents/tetris/ivado_or/tetris-api-worker/utilities/optimization/reader.py'>\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "pd.options.display.max_columns=999\n",
    "\n",
    "from pathlib import Path\n",
    "\n",
    "import os, sys\n",
    "sys.path.append(os.path.abspath(\"../../\"))\n",
    "\n",
    "import utilities.optimization.reader as rd\n",
    "# import utilities.optimization.checker as checker\n",
    "from importlib import reload\n",
    "\n",
    "print(reload(rd))\n",
    "\n",
    "import itertools\n",
    "import logging\n",
    "from joblib import Parallel, delayed\n",
    "\n",
    "\n",
    "# DATA_PATH = \"\"\n",
    "fn = 'UnileverShipmentPOS.csv'\n",
    "data_path = Path(DATA_PATH) /fn\n",
    "\n",
    "# visulization\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "634289bd-0411-43e6-a491-29c932b64d7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "fn = 'UnileverShipmentPOS.csv'\n",
    "df = pd.read_csv(data_path)\n",
    "sparse_cols = ['ExplodedShipmentCases', 'ExplodedShipmentNSV', 'ExplodedShipmentUnits','FeaturePrice','ChangeLossesQty']\n",
    "sparse_cols += ['MIN_WeekNumber', 'MAX_WeekNumber']\n",
    "selected_cols = [c for c in df.columns if c not in sparse_cols]\n",
    "df = df.drop_duplicates(selected_cols)[selected_cols]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7678a6bd-0358-4356-853b-e58e1b80d6d5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We have 213085 entries, including 854 unique products\n"
     ]
    }
   ],
   "source": [
    "print('We have %s entries, including %i unique products' % (df.shape[0], len(df.CASE_UPC_CD.unique())))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3596c880-8ec7-4155-a7be-472a12f637ea",
   "metadata": {},
   "source": [
    "Lets look at product `778888877890`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "ef71c622-2b85-4ba2-b638-892012734b3b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CASE_UPC_CD</th>\n",
       "      <th>WeekNumber</th>\n",
       "      <th>Year</th>\n",
       "      <th>ShipmentNSV</th>\n",
       "      <th>ShipmentUnits</th>\n",
       "      <th>ShipmentCases</th>\n",
       "      <th>ShipmentPricePerUnit</th>\n",
       "      <th>FinalCustomerExpectedOrderQty</th>\n",
       "      <th>DispatchedQty</th>\n",
       "      <th>POSSales</th>\n",
       "      <th>POSUnits</th>\n",
       "      <th>POSCases</th>\n",
       "      <th>QtyOnHand</th>\n",
       "      <th>POSPricePerUnit</th>\n",
       "      <th>UnitsPerCase</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.400000e+02</td>\n",
       "      <td>240.000000</td>\n",
       "      <td>240.000000</td>\n",
       "      <td>178.000000</td>\n",
       "      <td>178.000000</td>\n",
       "      <td>178.000000</td>\n",
       "      <td>240.000000</td>\n",
       "      <td>173.000000</td>\n",
       "      <td>173.000000</td>\n",
       "      <td>195.000000</td>\n",
       "      <td>195.000000</td>\n",
       "      <td>195.000000</td>\n",
       "      <td>188.000000</td>\n",
       "      <td>240.000000</td>\n",
       "      <td>240.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.788889e+11</td>\n",
       "      <td>201944.500000</td>\n",
       "      <td>2019.166667</td>\n",
       "      <td>5278.168539</td>\n",
       "      <td>693.033708</td>\n",
       "      <td>173.258427</td>\n",
       "      <td>7.722053</td>\n",
       "      <td>178.687861</td>\n",
       "      <td>172.156069</td>\n",
       "      <td>5611.716410</td>\n",
       "      <td>663.482051</td>\n",
       "      <td>165.870513</td>\n",
       "      <td>1415.351064</td>\n",
       "      <td>8.623597</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>133.304007</td>\n",
       "      <td>1.346518</td>\n",
       "      <td>3669.470027</td>\n",
       "      <td>448.465266</td>\n",
       "      <td>112.116317</td>\n",
       "      <td>0.928402</td>\n",
       "      <td>120.774226</td>\n",
       "      <td>109.856111</td>\n",
       "      <td>2007.474412</td>\n",
       "      <td>259.620646</td>\n",
       "      <td>64.905162</td>\n",
       "      <td>1307.407654</td>\n",
       "      <td>0.484525</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>7.788889e+11</td>\n",
       "      <td>201721.000000</td>\n",
       "      <td>2017.000000</td>\n",
       "      <td>-3715.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.572430</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.939877</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>7.788889e+11</td>\n",
       "      <td>201828.750000</td>\n",
       "      <td>2018.000000</td>\n",
       "      <td>2868.500000</td>\n",
       "      <td>391.000000</td>\n",
       "      <td>97.750000</td>\n",
       "      <td>7.910000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>4576.885000</td>\n",
       "      <td>517.500000</td>\n",
       "      <td>129.375000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.264809</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.788889e+11</td>\n",
       "      <td>201936.500000</td>\n",
       "      <td>2019.000000</td>\n",
       "      <td>4558.000000</td>\n",
       "      <td>592.000000</td>\n",
       "      <td>148.000000</td>\n",
       "      <td>7.912259</td>\n",
       "      <td>152.000000</td>\n",
       "      <td>148.000000</td>\n",
       "      <td>5576.640000</td>\n",
       "      <td>632.000000</td>\n",
       "      <td>158.000000</td>\n",
       "      <td>2172.000000</td>\n",
       "      <td>8.911316</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.788889e+11</td>\n",
       "      <td>202044.250000</td>\n",
       "      <td>2020.000000</td>\n",
       "      <td>6893.750000</td>\n",
       "      <td>872.000000</td>\n",
       "      <td>218.000000</td>\n",
       "      <td>7.913194</td>\n",
       "      <td>218.000000</td>\n",
       "      <td>218.000000</td>\n",
       "      <td>6883.530000</td>\n",
       "      <td>842.500000</td>\n",
       "      <td>210.625000</td>\n",
       "      <td>2539.500000</td>\n",
       "      <td>8.922628</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.788889e+11</td>\n",
       "      <td>202152.000000</td>\n",
       "      <td>2021.000000</td>\n",
       "      <td>18894.000000</td>\n",
       "      <td>2388.000000</td>\n",
       "      <td>597.000000</td>\n",
       "      <td>13.364583</td>\n",
       "      <td>792.000000</td>\n",
       "      <td>597.000000</td>\n",
       "      <td>12380.740000</td>\n",
       "      <td>1784.000000</td>\n",
       "      <td>446.000000</td>\n",
       "      <td>3365.000000</td>\n",
       "      <td>9.002787</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        CASE_UPC_CD     WeekNumber         Year   ShipmentNSV  ShipmentUnits  \\\n",
       "count  2.400000e+02     240.000000   240.000000    178.000000     178.000000   \n",
       "mean   7.788889e+11  201944.500000  2019.166667   5278.168539     693.033708   \n",
       "std    0.000000e+00     133.304007     1.346518   3669.470027     448.465266   \n",
       "min    7.788889e+11  201721.000000  2017.000000  -3715.000000       0.000000   \n",
       "25%    7.788889e+11  201828.750000  2018.000000   2868.500000     391.000000   \n",
       "50%    7.788889e+11  201936.500000  2019.000000   4558.000000     592.000000   \n",
       "75%    7.788889e+11  202044.250000  2020.000000   6893.750000     872.000000   \n",
       "max    7.788889e+11  202152.000000  2021.000000  18894.000000    2388.000000   \n",
       "\n",
       "       ShipmentCases  ShipmentPricePerUnit  FinalCustomerExpectedOrderQty  \\\n",
       "count     178.000000            240.000000                     173.000000   \n",
       "mean      173.258427              7.722053                     178.687861   \n",
       "std       112.116317              0.928402                     120.774226   \n",
       "min         0.000000              1.572430                      12.000000   \n",
       "25%        97.750000              7.910000                     100.000000   \n",
       "50%       148.000000              7.912259                     152.000000   \n",
       "75%       218.000000              7.913194                     218.000000   \n",
       "max       597.000000             13.364583                     792.000000   \n",
       "\n",
       "       DispatchedQty      POSSales     POSUnits    POSCases    QtyOnHand  \\\n",
       "count     173.000000    195.000000   195.000000  195.000000   188.000000   \n",
       "mean      172.156069   5611.716410   663.482051  165.870513  1415.351064   \n",
       "std       109.856111   2007.474412   259.620646   64.905162  1307.407654   \n",
       "min        12.000000      0.000000     0.000000    0.000000     0.000000   \n",
       "25%       100.000000   4576.885000   517.500000  129.375000     0.000000   \n",
       "50%       148.000000   5576.640000   632.000000  158.000000  2172.000000   \n",
       "75%       218.000000   6883.530000   842.500000  210.625000  2539.500000   \n",
       "max       597.000000  12380.740000  1784.000000  446.000000  3365.000000   \n",
       "\n",
       "       POSPricePerUnit  UnitsPerCase  \n",
       "count       240.000000         240.0  \n",
       "mean          8.623597           4.0  \n",
       "std           0.484525           0.0  \n",
       "min           6.939877           4.0  \n",
       "25%           8.264809           4.0  \n",
       "50%           8.911316           4.0  \n",
       "75%           8.922628           4.0  \n",
       "max           9.002787           4.0  "
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.CASE_UPC_CD ==778888877890].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "774e4074-f7bd-4548-9926-e7511306dbb1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CASE_UPC_CD</th>\n",
       "      <th>WeekNumber</th>\n",
       "      <th>YearMonth</th>\n",
       "      <th>Year</th>\n",
       "      <th>ShipmentNSV</th>\n",
       "      <th>ShipmentUnits</th>\n",
       "      <th>ShipmentCases</th>\n",
       "      <th>ShipmentPricePerUnit</th>\n",
       "      <th>FinalCustomerExpectedOrderQty</th>\n",
       "      <th>DispatchedQty</th>\n",
       "      <th>POSSales</th>\n",
       "      <th>POSUnits</th>\n",
       "      <th>POSCases</th>\n",
       "      <th>QtyOnHand</th>\n",
       "      <th>POSPricePerUnit</th>\n",
       "      <th>PGDesc</th>\n",
       "      <th>BrandDesc</th>\n",
       "      <th>CategoryDesc</th>\n",
       "      <th>DivisionDesc</th>\n",
       "      <th>UnitsPerCase</th>\n",
       "      <th>is_holiday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>778888877460</td>\n",
       "      <td>201401</td>\n",
       "      <td>Jan_2014</td>\n",
       "      <td>2014</td>\n",
       "      <td>1142.12</td>\n",
       "      <td>272.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>4.198971</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.915527</td>\n",
       "      <td>208-VSZ NCJRZM OJJG 1XO</td>\n",
       "      <td>GT-VSZ WJYT RVNC</td>\n",
       "      <td>6P-PERSONAL WASH</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>4</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>778888878320</td>\n",
       "      <td>201401</td>\n",
       "      <td>Jan_2014</td>\n",
       "      <td>2014</td>\n",
       "      <td>1257.13</td>\n",
       "      <td>282.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>4.457908</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.013196</td>\n",
       "      <td>X8D-YJQZ WR HZIN 3 80.2U</td>\n",
       "      <td>85-YJQZ WR HZIN+XVMZ</td>\n",
       "      <td>6P-PERSONAL WASH</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>6</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>778888878321</td>\n",
       "      <td>201401</td>\n",
       "      <td>Jan_2014</td>\n",
       "      <td>2014</td>\n",
       "      <td>80.24</td>\n",
       "      <td>18.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.457778</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.070727</td>\n",
       "      <td>X8D-YJQZ WR HZIN 3 80.2U</td>\n",
       "      <td>85-YJQZ WR HZIN+XVMZ</td>\n",
       "      <td>6P-PERSONAL WASH</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>6</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>778888878322</td>\n",
       "      <td>201401</td>\n",
       "      <td>Jan_2014</td>\n",
       "      <td>2014</td>\n",
       "      <td>1257.13</td>\n",
       "      <td>282.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>4.457908</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.069633</td>\n",
       "      <td>X8D-YJQZ WR HZIN 3 80.2U</td>\n",
       "      <td>85-YJQZ WR HZIN+XVMZ</td>\n",
       "      <td>6P-PERSONAL WASH</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>6</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>778888874368</td>\n",
       "      <td>201401</td>\n",
       "      <td>Jan_2014</td>\n",
       "      <td>2014</td>\n",
       "      <td>1015.93</td>\n",
       "      <td>228.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>4.455833</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.762366</td>\n",
       "      <td>FKP-YQ HWR 3-89U (021HG)</td>\n",
       "      <td>FE-YJQZ WJYT RVNC</td>\n",
       "      <td>6P-PERSONAL WASH</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>6</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48722</th>\n",
       "      <td>737226987791</td>\n",
       "      <td>201652</td>\n",
       "      <td>Dec_2016</td>\n",
       "      <td>2016</td>\n",
       "      <td>256.40</td>\n",
       "      <td>32.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.012500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1465.80</td>\n",
       "      <td>105.0</td>\n",
       "      <td>26.25</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.960000</td>\n",
       "      <td>7AL-IZSSPN NC-XY 1 1.5JU&amp;80.2JU</td>\n",
       "      <td>0O-IZSSPN NC-XY</td>\n",
       "      <td>6T-HAIR CARE</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>4</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48723</th>\n",
       "      <td>737226987701</td>\n",
       "      <td>201652</td>\n",
       "      <td>Dec_2016</td>\n",
       "      <td>2016</td>\n",
       "      <td>200.14</td>\n",
       "      <td>20.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>10.007000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1294.96</td>\n",
       "      <td>76.0</td>\n",
       "      <td>19.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.038947</td>\n",
       "      <td>7YM-IZSSPN XY HDSZY NDUZN 1KF</td>\n",
       "      <td>0O-IZSSPN NC-XY</td>\n",
       "      <td>6T-HAIR CARE</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>4</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48724</th>\n",
       "      <td>740968011735</td>\n",
       "      <td>201652</td>\n",
       "      <td>Dec_2016</td>\n",
       "      <td>2016</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.970000</td>\n",
       "      <td>36N-NQB WVWT YDVKZMN JQZMIBCO HDSZY NDUZN 1K</td>\n",
       "      <td>3B-NQB WVWT YDVKZMN</td>\n",
       "      <td>0C-SVG OTHER PERSONAL CARE</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>4</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48725</th>\n",
       "      <td>740968011736</td>\n",
       "      <td>201652</td>\n",
       "      <td>Dec_2016</td>\n",
       "      <td>2016</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.040000</td>\n",
       "      <td>36N-NQB WVWT YDVKZMN JQZMIBCO HDSZY NDUZN 1K</td>\n",
       "      <td>3B-NQB WVWT YDVKZMN</td>\n",
       "      <td>0C-SVG OTHER PERSONAL CARE</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>4</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48726</th>\n",
       "      <td>740968011747</td>\n",
       "      <td>201652</td>\n",
       "      <td>Dec_2016</td>\n",
       "      <td>2016</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.072917</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.575000</td>\n",
       "      <td>36N-NQB WVWT YDVKZMN JQZMIBCO HDSZY NDUZN 1K</td>\n",
       "      <td>3B-NQB WVWT YDVKZMN</td>\n",
       "      <td>0C-SVG OTHER PERSONAL CARE</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>4</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>48727 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        CASE_UPC_CD  WeekNumber YearMonth  Year  ShipmentNSV  ShipmentUnits  \\\n",
       "0      778888877460      201401  Jan_2014  2014      1142.12          272.0   \n",
       "1      778888878320      201401  Jan_2014  2014      1257.13          282.0   \n",
       "2      778888878321      201401  Jan_2014  2014        80.24           18.0   \n",
       "3      778888878322      201401  Jan_2014  2014      1257.13          282.0   \n",
       "4      778888874368      201401  Jan_2014  2014      1015.93          228.0   \n",
       "...             ...         ...       ...   ...          ...            ...   \n",
       "48722  737226987791      201652  Dec_2016  2016       256.40           32.0   \n",
       "48723  737226987701      201652  Dec_2016  2016       200.14           20.0   \n",
       "48724  740968011735      201652  Dec_2016  2016          NaN            NaN   \n",
       "48725  740968011736      201652  Dec_2016  2016          NaN            NaN   \n",
       "48726  740968011747      201652  Dec_2016  2016          NaN            NaN   \n",
       "\n",
       "       ShipmentCases  ShipmentPricePerUnit  FinalCustomerExpectedOrderQty  \\\n",
       "0               68.0              4.198971                            NaN   \n",
       "1               47.0              4.457908                            NaN   \n",
       "2                3.0              4.457778                            NaN   \n",
       "3               47.0              4.457908                            NaN   \n",
       "4               38.0              4.455833                            NaN   \n",
       "...              ...                   ...                            ...   \n",
       "48722            8.0              8.012500                            NaN   \n",
       "48723            5.0             10.007000                            NaN   \n",
       "48724            NaN             11.000000                            NaN   \n",
       "48725            NaN             11.000000                            NaN   \n",
       "48726            NaN             11.072917                            NaN   \n",
       "\n",
       "       DispatchedQty  POSSales  POSUnits  POSCases  QtyOnHand  \\\n",
       "0                NaN       NaN       NaN       NaN        NaN   \n",
       "1                NaN       NaN       NaN       NaN        NaN   \n",
       "2                NaN       NaN       NaN       NaN        NaN   \n",
       "3                NaN       NaN       NaN       NaN        NaN   \n",
       "4                NaN       NaN       NaN       NaN        NaN   \n",
       "...              ...       ...       ...       ...        ...   \n",
       "48722            NaN   1465.80     105.0     26.25        0.0   \n",
       "48723            NaN   1294.96      76.0     19.00        0.0   \n",
       "48724            NaN       NaN       NaN       NaN        NaN   \n",
       "48725            NaN       NaN       NaN       NaN        NaN   \n",
       "48726            NaN       NaN       NaN       NaN        NaN   \n",
       "\n",
       "       POSPricePerUnit                                        PGDesc  \\\n",
       "0             4.915527                       208-VSZ NCJRZM OJJG 1XO   \n",
       "1             5.013196                      X8D-YJQZ WR HZIN 3 80.2U   \n",
       "2             5.070727                      X8D-YJQZ WR HZIN 3 80.2U   \n",
       "3             5.069633                      X8D-YJQZ WR HZIN 3 80.2U   \n",
       "4             4.762366                      FKP-YQ HWR 3-89U (021HG)   \n",
       "...                ...                                           ...   \n",
       "48722        13.960000               7AL-IZSSPN NC-XY 1 1.5JU&80.2JU   \n",
       "48723        17.038947                 7YM-IZSSPN XY HDSZY NDUZN 1KF   \n",
       "48724        13.970000  36N-NQB WVWT YDVKZMN JQZMIBCO HDSZY NDUZN 1K   \n",
       "48725        13.040000  36N-NQB WVWT YDVKZMN JQZMIBCO HDSZY NDUZN 1K   \n",
       "48726        12.575000  36N-NQB WVWT YDVKZMN JQZMIBCO HDSZY NDUZN 1K   \n",
       "\n",
       "                  BrandDesc                CategoryDesc  \\\n",
       "0          GT-VSZ WJYT RVNC            6P-PERSONAL WASH   \n",
       "1      85-YJQZ WR HZIN+XVMZ            6P-PERSONAL WASH   \n",
       "2      85-YJQZ WR HZIN+XVMZ            6P-PERSONAL WASH   \n",
       "3      85-YJQZ WR HZIN+XVMZ            6P-PERSONAL WASH   \n",
       "4         FE-YJQZ WJYT RVNC            6P-PERSONAL WASH   \n",
       "...                     ...                         ...   \n",
       "48722       0O-IZSSPN NC-XY                6T-HAIR CARE   \n",
       "48723       0O-IZSSPN NC-XY                6T-HAIR CARE   \n",
       "48724   3B-NQB WVWT YDVKZMN  0C-SVG OTHER PERSONAL CARE   \n",
       "48725   3B-NQB WVWT YDVKZMN  0C-SVG OTHER PERSONAL CARE   \n",
       "48726   3B-NQB WVWT YDVKZMN  0C-SVG OTHER PERSONAL CARE   \n",
       "\n",
       "                  DivisionDesc  UnitsPerCase  is_holiday  \n",
       "0      HP-HOME & PERSONAL CARE             4        True  \n",
       "1      HP-HOME & PERSONAL CARE             6        True  \n",
       "2      HP-HOME & PERSONAL CARE             6        True  \n",
       "3      HP-HOME & PERSONAL CARE             6        True  \n",
       "4      HP-HOME & PERSONAL CARE             6        True  \n",
       "...                        ...           ...         ...  \n",
       "48722  HP-HOME & PERSONAL CARE             4        True  \n",
       "48723  HP-HOME & PERSONAL CARE             4        True  \n",
       "48724  HP-HOME & PERSONAL CARE             4        True  \n",
       "48725  HP-HOME & PERSONAL CARE             4        True  \n",
       "48726  HP-HOME & PERSONAL CARE             4        True  \n",
       "\n",
       "[48727 rows x 21 columns]"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "us_calendar = pd.read_csv(Path(DATA_PATH)/'example_US_calendar.csv')\n",
    "# aggregate over the weekly and flag holiday as in week \n",
    "# parse weeknumber:200101, \n",
    "def week_nb_getter(r):\n",
    "    return int(str(r['year'])+str(r['weeknumber']).zfill(2))\n",
    "us_calendar['WeekNumber'] =  us_calendar.apply(week_nb_getter, axis=1)\n",
    "# WeekNumber is_holiday \n",
    "us_holidays = us_calendar.groupby(['WeekNumber','year'])['is_holiday'].any().reset_index().rename(columns={'year':'Year'})\n",
    "# join with unilever datasets \n",
    "df.merge(us_holidays, on=['WeekNumber', 'Year'], how='inner',)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "36a3c208-6d99-4453-912a-98ea84b1723b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CASE_UPC_CD</th>\n",
       "      <th>WeekNumber</th>\n",
       "      <th>Year</th>\n",
       "      <th>ShipmentNSV</th>\n",
       "      <th>ShipmentUnits</th>\n",
       "      <th>ShipmentCases</th>\n",
       "      <th>ShipmentPricePerUnit</th>\n",
       "      <th>FinalCustomerExpectedOrderQty</th>\n",
       "      <th>DispatchedQty</th>\n",
       "      <th>POSSales</th>\n",
       "      <th>POSUnits</th>\n",
       "      <th>POSCases</th>\n",
       "      <th>QtyOnHand</th>\n",
       "      <th>POSPricePerUnit</th>\n",
       "      <th>UnitsPerCase</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4.872700e+04</td>\n",
       "      <td>48727.000000</td>\n",
       "      <td>48727.000000</td>\n",
       "      <td>43872.000000</td>\n",
       "      <td>43872.000000</td>\n",
       "      <td>43872.000000</td>\n",
       "      <td>48727.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>46517.000000</td>\n",
       "      <td>46517.000000</td>\n",
       "      <td>46517.000000</td>\n",
       "      <td>46409.0</td>\n",
       "      <td>48727.000000</td>\n",
       "      <td>48727.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.726891e+11</td>\n",
       "      <td>201533.998030</td>\n",
       "      <td>2015.071849</td>\n",
       "      <td>6707.910449</td>\n",
       "      <td>1952.597908</td>\n",
       "      <td>212.412314</td>\n",
       "      <td>4.114129</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6602.789775</td>\n",
       "      <td>1931.986220</td>\n",
       "      <td>211.381816</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.369201</td>\n",
       "      <td>10.617440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>7.555394e+09</td>\n",
       "      <td>82.612337</td>\n",
       "      <td>0.813695</td>\n",
       "      <td>12387.355941</td>\n",
       "      <td>3523.414308</td>\n",
       "      <td>342.274709</td>\n",
       "      <td>2.001151</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9038.120933</td>\n",
       "      <td>2827.476215</td>\n",
       "      <td>288.290025</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.186424</td>\n",
       "      <td>8.150016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>7.072987e+11</td>\n",
       "      <td>201401.000000</td>\n",
       "      <td>2014.000000</td>\n",
       "      <td>-18316.800000</td>\n",
       "      <td>-6912.000000</td>\n",
       "      <td>-303.250000</td>\n",
       "      <td>0.010186</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.968714</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>7.725446e+11</td>\n",
       "      <td>201444.000000</td>\n",
       "      <td>2014.000000</td>\n",
       "      <td>1592.640000</td>\n",
       "      <td>408.000000</td>\n",
       "      <td>48.000000</td>\n",
       "      <td>2.607188</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2587.620000</td>\n",
       "      <td>594.000000</td>\n",
       "      <td>71.416667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.968503</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.735178e+11</td>\n",
       "      <td>201532.000000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>3763.520000</td>\n",
       "      <td>984.000000</td>\n",
       "      <td>121.000000</td>\n",
       "      <td>4.196594</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4696.630000</td>\n",
       "      <td>1151.000000</td>\n",
       "      <td>138.833333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.343780</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.746177e+11</td>\n",
       "      <td>201618.000000</td>\n",
       "      <td>2016.000000</td>\n",
       "      <td>7560.472500</td>\n",
       "      <td>2232.000000</td>\n",
       "      <td>246.000000</td>\n",
       "      <td>4.973333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7700.260000</td>\n",
       "      <td>2278.000000</td>\n",
       "      <td>246.833333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.519325</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.799177e+11</td>\n",
       "      <td>201652.000000</td>\n",
       "      <td>2016.000000</td>\n",
       "      <td>623844.350000</td>\n",
       "      <td>157067.004000</td>\n",
       "      <td>13088.917000</td>\n",
       "      <td>12.040000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>428939.390000</td>\n",
       "      <td>134887.000000</td>\n",
       "      <td>11240.583330</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.038947</td>\n",
       "      <td>72.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        CASE_UPC_CD     WeekNumber          Year    ShipmentNSV  \\\n",
       "count  4.872700e+04   48727.000000  48727.000000   43872.000000   \n",
       "mean   7.726891e+11  201533.998030   2015.071849    6707.910449   \n",
       "std    7.555394e+09      82.612337      0.813695   12387.355941   \n",
       "min    7.072987e+11  201401.000000   2014.000000  -18316.800000   \n",
       "25%    7.725446e+11  201444.000000   2014.000000    1592.640000   \n",
       "50%    7.735178e+11  201532.000000   2015.000000    3763.520000   \n",
       "75%    7.746177e+11  201618.000000   2016.000000    7560.472500   \n",
       "max    7.799177e+11  201652.000000   2016.000000  623844.350000   \n",
       "\n",
       "       ShipmentUnits  ShipmentCases  ShipmentPricePerUnit  \\\n",
       "count   43872.000000   43872.000000          48727.000000   \n",
       "mean     1952.597908     212.412314              4.114129   \n",
       "std      3523.414308     342.274709              2.001151   \n",
       "min     -6912.000000    -303.250000              0.010186   \n",
       "25%       408.000000      48.000000              2.607188   \n",
       "50%       984.000000     121.000000              4.196594   \n",
       "75%      2232.000000     246.000000              4.973333   \n",
       "max    157067.004000   13088.917000             12.040000   \n",
       "\n",
       "       FinalCustomerExpectedOrderQty  DispatchedQty       POSSales  \\\n",
       "count                            0.0            0.0   46517.000000   \n",
       "mean                             NaN            NaN    6602.789775   \n",
       "std                              NaN            NaN    9038.120933   \n",
       "min                              NaN            NaN       0.000000   \n",
       "25%                              NaN            NaN    2587.620000   \n",
       "50%                              NaN            NaN    4696.630000   \n",
       "75%                              NaN            NaN    7700.260000   \n",
       "max                              NaN            NaN  428939.390000   \n",
       "\n",
       "            POSUnits      POSCases  QtyOnHand  POSPricePerUnit  UnitsPerCase  \n",
       "count   46517.000000  46517.000000    46409.0     48727.000000  48727.000000  \n",
       "mean     1931.986220    211.381816        0.0         4.369201     10.617440  \n",
       "std      2827.476215    288.290025        0.0         2.186424      8.150016  \n",
       "min         0.000000      0.000000        0.0         0.968714      4.000000  \n",
       "25%       594.000000     71.416667        0.0         2.968503      6.000000  \n",
       "50%      1151.000000    138.833333        0.0         4.343780      8.000000  \n",
       "75%      2278.000000    246.833333        0.0         5.519325     12.000000  \n",
       "max    134887.000000  11240.583330        0.0        17.038947     72.000000  "
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.merge(us_holidays, on=['WeekNumber', 'Year'], how='inner',).describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e9220ad-9250-4236-9a3d-0f722dc2ce98",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e90bb863-9f22-467a-9504-d455988cc505",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b30d57bc-49d6-4877-bd24-55839f49b387",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "# Choose ShipmentUnits as targetted variables\n",
    "# Historical data from 201801 to 202152\n",
    "feature_cols = [\n",
    "toy_df = df.drop_duplicates(selected_cols)[]\n",
    "MIN_HIST_WEEK = 201801, MAX_HIST_WEEK = 202152\n",
    "df[MIN_HIST_WEEK<=df.WeekNumber<=MAX_HIST_WEEK]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4f8dcb76-641c-454e-a000-936581614a15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Fuel_Price</th>\n",
       "      <th>MarkDown1</th>\n",
       "      <th>MarkDown2</th>\n",
       "      <th>MarkDown3</th>\n",
       "      <th>MarkDown4</th>\n",
       "      <th>MarkDown5</th>\n",
       "      <th>CPI</th>\n",
       "      <th>Unemployment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8190.000000</td>\n",
       "      <td>8190.000000</td>\n",
       "      <td>8190.000000</td>\n",
       "      <td>4032.000000</td>\n",
       "      <td>2921.000000</td>\n",
       "      <td>3613.000000</td>\n",
       "      <td>3464.000000</td>\n",
       "      <td>4050.000000</td>\n",
       "      <td>7605.000000</td>\n",
       "      <td>7605.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>23.000000</td>\n",
       "      <td>59.356198</td>\n",
       "      <td>3.405992</td>\n",
       "      <td>7032.371786</td>\n",
       "      <td>3384.176594</td>\n",
       "      <td>1760.100180</td>\n",
       "      <td>3292.935886</td>\n",
       "      <td>4132.216422</td>\n",
       "      <td>172.460809</td>\n",
       "      <td>7.826821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>12.987966</td>\n",
       "      <td>18.678607</td>\n",
       "      <td>0.431337</td>\n",
       "      <td>9262.747448</td>\n",
       "      <td>8793.583016</td>\n",
       "      <td>11276.462208</td>\n",
       "      <td>6792.329861</td>\n",
       "      <td>13086.690278</td>\n",
       "      <td>39.738346</td>\n",
       "      <td>1.877259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-7.290000</td>\n",
       "      <td>2.472000</td>\n",
       "      <td>-2781.450000</td>\n",
       "      <td>-265.760000</td>\n",
       "      <td>-179.260000</td>\n",
       "      <td>0.220000</td>\n",
       "      <td>-185.170000</td>\n",
       "      <td>126.064000</td>\n",
       "      <td>3.684000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>12.000000</td>\n",
       "      <td>45.902500</td>\n",
       "      <td>3.041000</td>\n",
       "      <td>1577.532500</td>\n",
       "      <td>68.880000</td>\n",
       "      <td>6.600000</td>\n",
       "      <td>304.687500</td>\n",
       "      <td>1440.827500</td>\n",
       "      <td>132.364839</td>\n",
       "      <td>6.634000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>23.000000</td>\n",
       "      <td>60.710000</td>\n",
       "      <td>3.513000</td>\n",
       "      <td>4743.580000</td>\n",
       "      <td>364.570000</td>\n",
       "      <td>36.260000</td>\n",
       "      <td>1176.425000</td>\n",
       "      <td>2727.135000</td>\n",
       "      <td>182.764003</td>\n",
       "      <td>7.806000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>34.000000</td>\n",
       "      <td>73.880000</td>\n",
       "      <td>3.743000</td>\n",
       "      <td>8923.310000</td>\n",
       "      <td>2153.350000</td>\n",
       "      <td>163.150000</td>\n",
       "      <td>3310.007500</td>\n",
       "      <td>4832.555000</td>\n",
       "      <td>213.932412</td>\n",
       "      <td>8.567000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>45.000000</td>\n",
       "      <td>101.950000</td>\n",
       "      <td>4.468000</td>\n",
       "      <td>103184.980000</td>\n",
       "      <td>104519.540000</td>\n",
       "      <td>149483.310000</td>\n",
       "      <td>67474.850000</td>\n",
       "      <td>771448.100000</td>\n",
       "      <td>228.976456</td>\n",
       "      <td>14.313000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Store  Temperature   Fuel_Price      MarkDown1      MarkDown2  \\\n",
       "count  8190.000000  8190.000000  8190.000000    4032.000000    2921.000000   \n",
       "mean     23.000000    59.356198     3.405992    7032.371786    3384.176594   \n",
       "std      12.987966    18.678607     0.431337    9262.747448    8793.583016   \n",
       "min       1.000000    -7.290000     2.472000   -2781.450000    -265.760000   \n",
       "25%      12.000000    45.902500     3.041000    1577.532500      68.880000   \n",
       "50%      23.000000    60.710000     3.513000    4743.580000     364.570000   \n",
       "75%      34.000000    73.880000     3.743000    8923.310000    2153.350000   \n",
       "max      45.000000   101.950000     4.468000  103184.980000  104519.540000   \n",
       "\n",
       "           MarkDown3     MarkDown4      MarkDown5          CPI  Unemployment  \n",
       "count    3613.000000   3464.000000    4050.000000  7605.000000   7605.000000  \n",
       "mean     1760.100180   3292.935886    4132.216422   172.460809      7.826821  \n",
       "std     11276.462208   6792.329861   13086.690278    39.738346      1.877259  \n",
       "min      -179.260000      0.220000    -185.170000   126.064000      3.684000  \n",
       "25%         6.600000    304.687500    1440.827500   132.364839      6.634000  \n",
       "50%        36.260000   1176.425000    2727.135000   182.764003      7.806000  \n",
       "75%       163.150000   3310.007500    4832.555000   213.932412      8.567000  \n",
       "max    149483.310000  67474.850000  771448.100000   228.976456     14.313000  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DATA_PATH = \"\"\n",
    "fn_features = 'features.csv'\n",
    "pd.read_csv(Path(DATA_PATH) /fn_features)\n",
    "\n",
    "walmart_feature = pd.read_csv(Path(DATA_PATH)/'features.csv.zip')\n",
    "walmart_feature.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77216fbd-90a0-4dab-9424-34435e99873c",
   "metadata": {},
   "outputs": [],
   "source": [
    "walmart_feature = pd.read_csv(Path(DATA_PATH)/'features.csv.zip')\n",
    "walmart_feature.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cc346b6-0c8b-473f-afb6-76275e3ccdfe",
   "metadata": {},
   "source": [
    "## Adding External Features from US Holidays\n",
    "Public sourced: https://github.com/Marto32/gencal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "f84031cc-f38c-4e49-884a-899091a66d9d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CASE_UPC_CD</th>\n",
       "      <th>WeekNumber</th>\n",
       "      <th>YearMonth</th>\n",
       "      <th>Year</th>\n",
       "      <th>ShipmentNSV</th>\n",
       "      <th>ShipmentUnits</th>\n",
       "      <th>ShipmentCases</th>\n",
       "      <th>ShipmentPricePerUnit</th>\n",
       "      <th>FinalCustomerExpectedOrderQty</th>\n",
       "      <th>DispatchedQty</th>\n",
       "      <th>POSSales</th>\n",
       "      <th>POSUnits</th>\n",
       "      <th>POSCases</th>\n",
       "      <th>QtyOnHand</th>\n",
       "      <th>POSPricePerUnit</th>\n",
       "      <th>PGDesc</th>\n",
       "      <th>BrandDesc</th>\n",
       "      <th>CategoryDesc</th>\n",
       "      <th>DivisionDesc</th>\n",
       "      <th>UnitsPerCase</th>\n",
       "      <th>is_holiday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>778888877460</td>\n",
       "      <td>201401</td>\n",
       "      <td>Jan_2014</td>\n",
       "      <td>2014</td>\n",
       "      <td>1142.12</td>\n",
       "      <td>272.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>4.198971</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.915527</td>\n",
       "      <td>208-VSZ NCJRZM OJJG 1XO</td>\n",
       "      <td>GT-VSZ WJYT RVNC</td>\n",
       "      <td>6P-PERSONAL WASH</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>4</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>778888878320</td>\n",
       "      <td>201401</td>\n",
       "      <td>Jan_2014</td>\n",
       "      <td>2014</td>\n",
       "      <td>1257.13</td>\n",
       "      <td>282.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>4.457908</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.013196</td>\n",
       "      <td>X8D-YJQZ WR HZIN 3 80.2U</td>\n",
       "      <td>85-YJQZ WR HZIN+XVMZ</td>\n",
       "      <td>6P-PERSONAL WASH</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>6</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>778888878321</td>\n",
       "      <td>201401</td>\n",
       "      <td>Jan_2014</td>\n",
       "      <td>2014</td>\n",
       "      <td>80.24</td>\n",
       "      <td>18.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.457778</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.070727</td>\n",
       "      <td>X8D-YJQZ WR HZIN 3 80.2U</td>\n",
       "      <td>85-YJQZ WR HZIN+XVMZ</td>\n",
       "      <td>6P-PERSONAL WASH</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>6</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>778888878322</td>\n",
       "      <td>201401</td>\n",
       "      <td>Jan_2014</td>\n",
       "      <td>2014</td>\n",
       "      <td>1257.13</td>\n",
       "      <td>282.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>4.457908</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.069633</td>\n",
       "      <td>X8D-YJQZ WR HZIN 3 80.2U</td>\n",
       "      <td>85-YJQZ WR HZIN+XVMZ</td>\n",
       "      <td>6P-PERSONAL WASH</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>6</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>778888874368</td>\n",
       "      <td>201401</td>\n",
       "      <td>Jan_2014</td>\n",
       "      <td>2014</td>\n",
       "      <td>1015.93</td>\n",
       "      <td>228.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>4.455833</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.762366</td>\n",
       "      <td>FKP-YQ HWR 3-89U (021HG)</td>\n",
       "      <td>FE-YJQZ WJYT RVNC</td>\n",
       "      <td>6P-PERSONAL WASH</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>6</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    CASE_UPC_CD  WeekNumber YearMonth  Year  ShipmentNSV  ShipmentUnits  \\\n",
       "0  778888877460      201401  Jan_2014  2014      1142.12          272.0   \n",
       "1  778888878320      201401  Jan_2014  2014      1257.13          282.0   \n",
       "2  778888878321      201401  Jan_2014  2014        80.24           18.0   \n",
       "3  778888878322      201401  Jan_2014  2014      1257.13          282.0   \n",
       "4  778888874368      201401  Jan_2014  2014      1015.93          228.0   \n",
       "\n",
       "   ShipmentCases  ShipmentPricePerUnit  FinalCustomerExpectedOrderQty  \\\n",
       "0           68.0              4.198971                            NaN   \n",
       "1           47.0              4.457908                            NaN   \n",
       "2            3.0              4.457778                            NaN   \n",
       "3           47.0              4.457908                            NaN   \n",
       "4           38.0              4.455833                            NaN   \n",
       "\n",
       "   DispatchedQty  POSSales  POSUnits  POSCases  QtyOnHand  POSPricePerUnit  \\\n",
       "0            NaN       NaN       NaN       NaN        NaN         4.915527   \n",
       "1            NaN       NaN       NaN       NaN        NaN         5.013196   \n",
       "2            NaN       NaN       NaN       NaN        NaN         5.070727   \n",
       "3            NaN       NaN       NaN       NaN        NaN         5.069633   \n",
       "4            NaN       NaN       NaN       NaN        NaN         4.762366   \n",
       "\n",
       "                     PGDesc             BrandDesc      CategoryDesc  \\\n",
       "0   208-VSZ NCJRZM OJJG 1XO      GT-VSZ WJYT RVNC  6P-PERSONAL WASH   \n",
       "1  X8D-YJQZ WR HZIN 3 80.2U  85-YJQZ WR HZIN+XVMZ  6P-PERSONAL WASH   \n",
       "2  X8D-YJQZ WR HZIN 3 80.2U  85-YJQZ WR HZIN+XVMZ  6P-PERSONAL WASH   \n",
       "3  X8D-YJQZ WR HZIN 3 80.2U  85-YJQZ WR HZIN+XVMZ  6P-PERSONAL WASH   \n",
       "4  FKP-YQ HWR 3-89U (021HG)     FE-YJQZ WJYT RVNC  6P-PERSONAL WASH   \n",
       "\n",
       "              DivisionDesc  UnitsPerCase  is_holiday  \n",
       "0  HP-HOME & PERSONAL CARE             4        True  \n",
       "1  HP-HOME & PERSONAL CARE             6        True  \n",
       "2  HP-HOME & PERSONAL CARE             6        True  \n",
       "3  HP-HOME & PERSONAL CARE             6        True  \n",
       "4  HP-HOME & PERSONAL CARE             6        True  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "us_calendar = pd.read_csv(Path(DATA_PATH)/'example_US_calendar.csv')\n",
    "# aggregate over the weekly and flag holiday as in week \n",
    "# parse weeknumber:200101, \n",
    "def week_nb_getter(r):\n",
    "    return int(str(r['year'])+str(r['weeknumber']).zfill(2))\n",
    "us_calendar['WeekNumber'] =  us_calendar.apply(week_nb_getter, axis=1)\n",
    "# WeekNumber is_holiday \n",
    "us_holidays = us_calendar.groupby(['WeekNumber','year'])['is_holiday'].any().reset_index().rename(columns={'year':'Year'})\n",
    "df.merge(us_holidays, how='inner', on=['WeekNumber','Year']).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1ac8da9b-b816-4dfd-b104-9f48dbe13f77",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         date  year  month  day  weekday weekday_name  weeknumber  is_weekend  \\\n",
      "0  2001-01-01  2001      1    1        1       Monday           1       False   \n",
      "1  2001-01-02  2001      1    2        2      Tuesday           1       False   \n",
      "2  2001-01-03  2001      1    3        3    Wednesday           1       False   \n",
      "3  2001-01-04  2001      1    4        4     Thursday           1       False   \n",
      "4  2001-01-05  2001      1    5        5       Friday           1       False   \n",
      "\n",
      "   is_business_day  is_holiday    holiday_name  WeekNumber  \n",
      "0            False        True  New Year's Day      200101  \n",
      "1             True       False             NaN      200101  \n",
      "2             True       False             NaN      200101  \n",
      "3             True       False             NaN      200101  \n",
      "4             True       False             NaN      200101  \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Index(['date', 'year', 'month', 'day', 'weekday', 'weekday_name', 'weeknumber',\n",
       "       'is_weekend', 'is_business_day', 'is_holiday', 'holiday_name',\n",
       "       'WeekNumber'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(us_calendar.head())\n",
    "us_calendar.describe()\n",
    "us_calendar.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb0b959c-d0d2-4b73-9896-0d2c8471b4c6",
   "metadata": {},
   "source": [
    "## Adding External features\n",
    "!pip install yfinance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "762e4efa-56d8-4a58-a823-096a34f8e197",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CASE_UPC_CD</th>\n",
       "      <th>WeekNumber</th>\n",
       "      <th>YearMonth</th>\n",
       "      <th>Year</th>\n",
       "      <th>ShipmentNSV</th>\n",
       "      <th>ShipmentUnits</th>\n",
       "      <th>ShipmentCases</th>\n",
       "      <th>ShipmentPricePerUnit</th>\n",
       "      <th>FinalCustomerExpectedOrderQty</th>\n",
       "      <th>DispatchedQty</th>\n",
       "      <th>POSSales</th>\n",
       "      <th>POSUnits</th>\n",
       "      <th>POSCases</th>\n",
       "      <th>QtyOnHand</th>\n",
       "      <th>POSPricePerUnit</th>\n",
       "      <th>PGDesc</th>\n",
       "      <th>BrandDesc</th>\n",
       "      <th>CategoryDesc</th>\n",
       "      <th>DivisionDesc</th>\n",
       "      <th>UnitsPerCase</th>\n",
       "      <th>sp500_mean</th>\n",
       "      <th>sp500_min</th>\n",
       "      <th>sp500_max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>778888877460</td>\n",
       "      <td>201401</td>\n",
       "      <td>Jan_2014</td>\n",
       "      <td>2014</td>\n",
       "      <td>1142.12</td>\n",
       "      <td>272.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>4.198971</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.915527</td>\n",
       "      <td>208-VSZ NCJRZM OJJG 1XO</td>\n",
       "      <td>GT-VSZ WJYT RVNC</td>\n",
       "      <td>6P-PERSONAL WASH</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>4</td>\n",
       "      <td>1831.674988</td>\n",
       "      <td>1831.369995</td>\n",
       "      <td>1831.979980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>778888878320</td>\n",
       "      <td>201401</td>\n",
       "      <td>Jan_2014</td>\n",
       "      <td>2014</td>\n",
       "      <td>1257.13</td>\n",
       "      <td>282.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>4.457908</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.013196</td>\n",
       "      <td>X8D-YJQZ WR HZIN 3 80.2U</td>\n",
       "      <td>85-YJQZ WR HZIN+XVMZ</td>\n",
       "      <td>6P-PERSONAL WASH</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>6</td>\n",
       "      <td>1831.674988</td>\n",
       "      <td>1831.369995</td>\n",
       "      <td>1831.979980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>778888878321</td>\n",
       "      <td>201401</td>\n",
       "      <td>Jan_2014</td>\n",
       "      <td>2014</td>\n",
       "      <td>80.24</td>\n",
       "      <td>18.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.457778</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.070727</td>\n",
       "      <td>X8D-YJQZ WR HZIN 3 80.2U</td>\n",
       "      <td>85-YJQZ WR HZIN+XVMZ</td>\n",
       "      <td>6P-PERSONAL WASH</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>6</td>\n",
       "      <td>1831.674988</td>\n",
       "      <td>1831.369995</td>\n",
       "      <td>1831.979980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>778888878322</td>\n",
       "      <td>201401</td>\n",
       "      <td>Jan_2014</td>\n",
       "      <td>2014</td>\n",
       "      <td>1257.13</td>\n",
       "      <td>282.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>4.457908</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.069633</td>\n",
       "      <td>X8D-YJQZ WR HZIN 3 80.2U</td>\n",
       "      <td>85-YJQZ WR HZIN+XVMZ</td>\n",
       "      <td>6P-PERSONAL WASH</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>6</td>\n",
       "      <td>1831.674988</td>\n",
       "      <td>1831.369995</td>\n",
       "      <td>1831.979980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>778888874368</td>\n",
       "      <td>201401</td>\n",
       "      <td>Jan_2014</td>\n",
       "      <td>2014</td>\n",
       "      <td>1015.93</td>\n",
       "      <td>228.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>4.455833</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.762366</td>\n",
       "      <td>FKP-YQ HWR 3-89U (021HG)</td>\n",
       "      <td>FE-YJQZ WJYT RVNC</td>\n",
       "      <td>6P-PERSONAL WASH</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>6</td>\n",
       "      <td>1831.674988</td>\n",
       "      <td>1831.369995</td>\n",
       "      <td>1831.979980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48722</th>\n",
       "      <td>737226987791</td>\n",
       "      <td>201652</td>\n",
       "      <td>Dec_2016</td>\n",
       "      <td>2016</td>\n",
       "      <td>256.40</td>\n",
       "      <td>32.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.012500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1465.80</td>\n",
       "      <td>105.0</td>\n",
       "      <td>26.25</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.960000</td>\n",
       "      <td>7AL-IZSSPN NC-XY 1 1.5JU&amp;80.2JU</td>\n",
       "      <td>0O-IZSSPN NC-XY</td>\n",
       "      <td>6T-HAIR CARE</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>4</td>\n",
       "      <td>2251.722473</td>\n",
       "      <td>2238.830078</td>\n",
       "      <td>2268.879883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48723</th>\n",
       "      <td>737226987701</td>\n",
       "      <td>201652</td>\n",
       "      <td>Dec_2016</td>\n",
       "      <td>2016</td>\n",
       "      <td>200.14</td>\n",
       "      <td>20.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>10.007000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1294.96</td>\n",
       "      <td>76.0</td>\n",
       "      <td>19.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.038947</td>\n",
       "      <td>7YM-IZSSPN XY HDSZY NDUZN 1KF</td>\n",
       "      <td>0O-IZSSPN NC-XY</td>\n",
       "      <td>6T-HAIR CARE</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>4</td>\n",
       "      <td>2251.722473</td>\n",
       "      <td>2238.830078</td>\n",
       "      <td>2268.879883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48724</th>\n",
       "      <td>740968011735</td>\n",
       "      <td>201652</td>\n",
       "      <td>Dec_2016</td>\n",
       "      <td>2016</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.970000</td>\n",
       "      <td>36N-NQB WVWT YDVKZMN JQZMIBCO HDSZY NDUZN 1K</td>\n",
       "      <td>3B-NQB WVWT YDVKZMN</td>\n",
       "      <td>0C-SVG OTHER PERSONAL CARE</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>4</td>\n",
       "      <td>2251.722473</td>\n",
       "      <td>2238.830078</td>\n",
       "      <td>2268.879883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48725</th>\n",
       "      <td>740968011736</td>\n",
       "      <td>201652</td>\n",
       "      <td>Dec_2016</td>\n",
       "      <td>2016</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.040000</td>\n",
       "      <td>36N-NQB WVWT YDVKZMN JQZMIBCO HDSZY NDUZN 1K</td>\n",
       "      <td>3B-NQB WVWT YDVKZMN</td>\n",
       "      <td>0C-SVG OTHER PERSONAL CARE</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>4</td>\n",
       "      <td>2251.722473</td>\n",
       "      <td>2238.830078</td>\n",
       "      <td>2268.879883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48726</th>\n",
       "      <td>740968011747</td>\n",
       "      <td>201652</td>\n",
       "      <td>Dec_2016</td>\n",
       "      <td>2016</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.072917</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.575000</td>\n",
       "      <td>36N-NQB WVWT YDVKZMN JQZMIBCO HDSZY NDUZN 1K</td>\n",
       "      <td>3B-NQB WVWT YDVKZMN</td>\n",
       "      <td>0C-SVG OTHER PERSONAL CARE</td>\n",
       "      <td>HP-HOME &amp; PERSONAL CARE</td>\n",
       "      <td>4</td>\n",
       "      <td>2251.722473</td>\n",
       "      <td>2238.830078</td>\n",
       "      <td>2268.879883</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>48727 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        CASE_UPC_CD  WeekNumber YearMonth  Year  ShipmentNSV  ShipmentUnits  \\\n",
       "0      778888877460      201401  Jan_2014  2014      1142.12          272.0   \n",
       "1      778888878320      201401  Jan_2014  2014      1257.13          282.0   \n",
       "2      778888878321      201401  Jan_2014  2014        80.24           18.0   \n",
       "3      778888878322      201401  Jan_2014  2014      1257.13          282.0   \n",
       "4      778888874368      201401  Jan_2014  2014      1015.93          228.0   \n",
       "...             ...         ...       ...   ...          ...            ...   \n",
       "48722  737226987791      201652  Dec_2016  2016       256.40           32.0   \n",
       "48723  737226987701      201652  Dec_2016  2016       200.14           20.0   \n",
       "48724  740968011735      201652  Dec_2016  2016          NaN            NaN   \n",
       "48725  740968011736      201652  Dec_2016  2016          NaN            NaN   \n",
       "48726  740968011747      201652  Dec_2016  2016          NaN            NaN   \n",
       "\n",
       "       ShipmentCases  ShipmentPricePerUnit  FinalCustomerExpectedOrderQty  \\\n",
       "0               68.0              4.198971                            NaN   \n",
       "1               47.0              4.457908                            NaN   \n",
       "2                3.0              4.457778                            NaN   \n",
       "3               47.0              4.457908                            NaN   \n",
       "4               38.0              4.455833                            NaN   \n",
       "...              ...                   ...                            ...   \n",
       "48722            8.0              8.012500                            NaN   \n",
       "48723            5.0             10.007000                            NaN   \n",
       "48724            NaN             11.000000                            NaN   \n",
       "48725            NaN             11.000000                            NaN   \n",
       "48726            NaN             11.072917                            NaN   \n",
       "\n",
       "       DispatchedQty  POSSales  POSUnits  POSCases  QtyOnHand  \\\n",
       "0                NaN       NaN       NaN       NaN        NaN   \n",
       "1                NaN       NaN       NaN       NaN        NaN   \n",
       "2                NaN       NaN       NaN       NaN        NaN   \n",
       "3                NaN       NaN       NaN       NaN        NaN   \n",
       "4                NaN       NaN       NaN       NaN        NaN   \n",
       "...              ...       ...       ...       ...        ...   \n",
       "48722            NaN   1465.80     105.0     26.25        0.0   \n",
       "48723            NaN   1294.96      76.0     19.00        0.0   \n",
       "48724            NaN       NaN       NaN       NaN        NaN   \n",
       "48725            NaN       NaN       NaN       NaN        NaN   \n",
       "48726            NaN       NaN       NaN       NaN        NaN   \n",
       "\n",
       "       POSPricePerUnit                                        PGDesc  \\\n",
       "0             4.915527                       208-VSZ NCJRZM OJJG 1XO   \n",
       "1             5.013196                      X8D-YJQZ WR HZIN 3 80.2U   \n",
       "2             5.070727                      X8D-YJQZ WR HZIN 3 80.2U   \n",
       "3             5.069633                      X8D-YJQZ WR HZIN 3 80.2U   \n",
       "4             4.762366                      FKP-YQ HWR 3-89U (021HG)   \n",
       "...                ...                                           ...   \n",
       "48722        13.960000               7AL-IZSSPN NC-XY 1 1.5JU&80.2JU   \n",
       "48723        17.038947                 7YM-IZSSPN XY HDSZY NDUZN 1KF   \n",
       "48724        13.970000  36N-NQB WVWT YDVKZMN JQZMIBCO HDSZY NDUZN 1K   \n",
       "48725        13.040000  36N-NQB WVWT YDVKZMN JQZMIBCO HDSZY NDUZN 1K   \n",
       "48726        12.575000  36N-NQB WVWT YDVKZMN JQZMIBCO HDSZY NDUZN 1K   \n",
       "\n",
       "                  BrandDesc                CategoryDesc  \\\n",
       "0          GT-VSZ WJYT RVNC            6P-PERSONAL WASH   \n",
       "1      85-YJQZ WR HZIN+XVMZ            6P-PERSONAL WASH   \n",
       "2      85-YJQZ WR HZIN+XVMZ            6P-PERSONAL WASH   \n",
       "3      85-YJQZ WR HZIN+XVMZ            6P-PERSONAL WASH   \n",
       "4         FE-YJQZ WJYT RVNC            6P-PERSONAL WASH   \n",
       "...                     ...                         ...   \n",
       "48722       0O-IZSSPN NC-XY                6T-HAIR CARE   \n",
       "48723       0O-IZSSPN NC-XY                6T-HAIR CARE   \n",
       "48724   3B-NQB WVWT YDVKZMN  0C-SVG OTHER PERSONAL CARE   \n",
       "48725   3B-NQB WVWT YDVKZMN  0C-SVG OTHER PERSONAL CARE   \n",
       "48726   3B-NQB WVWT YDVKZMN  0C-SVG OTHER PERSONAL CARE   \n",
       "\n",
       "                  DivisionDesc  UnitsPerCase   sp500_mean    sp500_min  \\\n",
       "0      HP-HOME & PERSONAL CARE             4  1831.674988  1831.369995   \n",
       "1      HP-HOME & PERSONAL CARE             6  1831.674988  1831.369995   \n",
       "2      HP-HOME & PERSONAL CARE             6  1831.674988  1831.369995   \n",
       "3      HP-HOME & PERSONAL CARE             6  1831.674988  1831.369995   \n",
       "4      HP-HOME & PERSONAL CARE             6  1831.674988  1831.369995   \n",
       "...                        ...           ...          ...          ...   \n",
       "48722  HP-HOME & PERSONAL CARE             4  2251.722473  2238.830078   \n",
       "48723  HP-HOME & PERSONAL CARE             4  2251.722473  2238.830078   \n",
       "48724  HP-HOME & PERSONAL CARE             4  2251.722473  2238.830078   \n",
       "48725  HP-HOME & PERSONAL CARE             4  2251.722473  2238.830078   \n",
       "48726  HP-HOME & PERSONAL CARE             4  2251.722473  2238.830078   \n",
       "\n",
       "         sp500_max  \n",
       "0      1831.979980  \n",
       "1      1831.979980  \n",
       "2      1831.979980  \n",
       "3      1831.979980  \n",
       "4      1831.979980  \n",
       "...            ...  \n",
       "48722  2268.879883  \n",
       "48723  2268.879883  \n",
       "48724  2268.879883  \n",
       "48725  2268.879883  \n",
       "48726  2268.879883  \n",
       "\n",
       "[48727 rows x 23 columns]"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "sp500 = yf.download('^GSPC', start='2014-01-01', end='2021-12-31')\n",
    "sp500['date'] = sp500.index.strftime('%Y-%m-%d')\n",
    "sp500 = sp500[['date', 'Close']].rename(columns={'Close': 'sp500_close'})\n",
    "weekly_sp500 = sp500.merge(us_calendar.drop_duplicates(['date','WeekNumber'])[['date','WeekNumber']], how='inner', on='date')\n",
    "# aggregate over weeks on min mean max\n",
    "weekly_sp500.groupby('WeekNumber').agg({'sp500_close': ['mean', 'min', 'max']\n",
    "}).reset_index()\n",
    "weekly_sp500 = weekly_sp500.groupby('WeekNumber').agg({'sp500_close': ['mean', 'min', 'max']\n",
    "}).reset_index()\n",
    "weekly_sp500.columns = weekly_sp500.columns.droplevel(0)\n",
    "weekly_sp500=weekly_sp500.rename(columns={'':'WeekNumber', 'mean':'sp500_mean', 'min':'sp500_min', 'max':'sp500_max'})\n",
    "df.merge(weekly_sp500, how='inner', on=['WeekNumber'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "2249aa1e-bcc7-46c3-924d-d51c101fc716",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# add weeks in\n",
    "sp500['date'] = sp500.index.strftime('%Y-%m-%d')\n",
    "weekly_sp500 = sp500.merge(us_calendar.drop_duplicates(['date','WeekNumber'])[['date','WeekNumber']], how='inner', on='date')\n",
    "# aggregate over weeks on min mean max\n",
    "weekly_sp500.groupby('WeekNumber').agg({'sp500_close': ['mean', 'min', 'max']\n",
    "}).reset_index()\n",
    "weekly_sp500 = weekly_sp500.groupby('WeekNumber').agg({'sp500_close': ['mean', 'min', 'max']\n",
    "}).reset_index()\n",
    "weekly_sp500.columns = weekly_sp500.columns.droplevel(0)\n",
    "weekly_sp500=weekly_sp500.rename(columns={'':'WeekNumber', 'mean':'sp500_mean', 'min':'sp500_min', 'max':'sp500_max'})\n",
    "# df.merge(weekly_sp500, how='inner', on=['WeekNumber'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77e5f629-b86a-4842-a1db-0af3bf5259e5",
   "metadata": {},
   "source": [
    "## Pivot to MTS dataformat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "2facc791-8e63-4abb-8a09-d1cb1856affe",
   "metadata": {},
   "outputs": [],
   "source": [
    "mts = df.pivot(index='WeekNumber', columns='CASE_UPC_CD', values='ShipmentUnits').fillna(0.0)\n",
    "mts=mts.merge(us_holidays, how='inner', on=['WeekNumber',]) # + is_holiday\n",
    "mts=mts.merge(weekly_sp500, how='inner', on=['WeekNumber']) # +"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "006ced2f-d5de-4fc6-acfa-d62ea03192be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "WeekNumber           201402\n",
       "548767530025            0.0\n",
       "548767545881            0.0\n",
       "707298672877         2340.0\n",
       "707298720331            0.0\n",
       "                   ...     \n",
       "Year                   2014\n",
       "is_holiday            False\n",
       "sp500_mean      1836.528003\n",
       "sp500_min        1826.77002\n",
       "sp500_max       1842.369995\n",
       "Name: 1, Length: 860, dtype: object"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mts.iloc[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33f10bd7-fbc3-43b9-9c7f-693a6543804e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "2b2b568e-ef72-429d-814c-eebed20f69aa",
   "metadata": {},
   "source": [
    "## Save as csv file "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "56cc29ca-eb95-4975-a944-1bb96c4201a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['WeekNumber', '548767530025', '548767545881', '707298672877',\n",
       "       '707298720331', '707298748186', '707298748252', '707298771006',\n",
       "       '707298771017', '707298771018',\n",
       "       ...\n",
       "       '779917777160', '779917777322', '779917777323', '779917777950',\n",
       "       '779917777958', 'Year', 'is_holiday', 'sp500_mean', 'sp500_min',\n",
       "       'sp500_max'],\n",
       "      dtype='object', length=860)"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "today_date = datetime.today().strftime('%Y-%m-%d')\n",
    "\n",
    "output_dir = DATA_PATH\n",
    "if not os.path.exists(output_dir):\n",
    "    os.makedirs(output_dir)\n",
    "write_fn = f'unilever_toy_dataset_{today_date}.csv'\n",
    "mts.to_csv(output_dir + '/' + write_fn, index=False)\n",
    "\n",
    "pd.read_csv(Path(DATA_PATH)/write_fn).columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "fc8f340c-a64f-4eaa-8082-7f14e2834700",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'unilever_toy_dataset_2024-06-06.csv'"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "write_fn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "26e46ec5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['WeekNumber', '548767530025', '548767545881', '707298672877',\n",
       "       '707298720331', '707298748186', '707298748252', '707298771006',\n",
       "       '707298771017', '707298771018',\n",
       "       ...\n",
       "       '779917777091', '779917777098', '779917777099', '779917777160',\n",
       "       '779917777322', '779917777323', '779917777950', '779917777958', 'Year',\n",
       "       'is_holiday'],\n",
       "      dtype='object', length=857)"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(Path(DATA_PATH)/'unilever_toy_dataset_2024-06-04.csv').columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f42a642-c10d-443a-89ca-25c1e1125d99",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f96492cf-b9ec-49de-8cd2-0252d55df6a9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ebab48d5-3650-4a30-8cf6-36ac0179e6a0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffdeec6e-85e2-435c-a07e-f4a0b7dd1447",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "176b37c5-cad3-445f-a97a-023f29516255",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import utilities.optimization.reader as rd\n",
    "dp = \"/Users/dawn.duan/Library/CloudStorage/OneDrive-CanadianTire/Documents/tetris/ivado_or/data\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "acf07296",
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_pog_details(a_pog_id, pogsDf):\n",
    "    protopog_size = pogsDf[pogsDf.pog_id == a_pog_id].pog_size.values[0]\n",
    "    a_category = pogsDf[pogsDf.pog_id == a_pog_id].pog_subcat.values[0]\n",
    "    return a_category, protopog_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "b1e7a121",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('AUTO ELECTRONICS', 'C')"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# passing display_df.iloc[1]\n",
    "row = display_df.loc[13]\n",
    "idx = row['combo_width']\n",
    "idcs=temp_df2[temp_df2==idx].index\n",
    "\n",
    "store_num=\"1979\"\n",
    "nb_segments = [1 for i in range(row.num_widths)]\n",
    "\n",
    "a_pog_id = idcs[0]\n",
    "a_category, protopog_size = find_pog_details(a_pog_id, pogsDf)\n",
    "a_category, protopog_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "c143b6a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'aisle_category': 'DRILL DRIVING & ROTARY TOOL ACCESSORIES',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'MECHANICS TOOLS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'WELD AND SOLDER',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'AIR COMPRESSORS, TOOLS & ACC.',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FISHING LURES - BC NORTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FISHING LURES - MANITOBA',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FISHING LURES - GREAT LAKES',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FISHING LURES - QUEBEC NORTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FISHING LURES - MARITIMES SOUTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FISHING LURES - ALBERTA NORTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FISHING LURES - ALBERTA SOUTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FISHING LURES - BC COASTAL',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FISHING LURES - BC SOUTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FISHING LURES - MARITIMES NORTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FISHING LURES - SASKATCHEWAN',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FISHING LURES - ONTARIO NORTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FISHING LURES - ONTARIO SOUTHWEST',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FISHING LURES - ONTARIO EAST',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FISHING LURES - QUEBEC EAST',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FISHING LURES - GREAT LAKES',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'FISHING LURES - MARITIMES SOUTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'FISHING LURES - BC COASTAL',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'FISHING LURES - BC SOUTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'FISHING LURES - MARITIMES NORTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'FISHING LURES - NEWFOUNDLAND',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'FISHING LURES - SASKATCHEWAN',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'FISHING LURES - ONTARIO NORTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'FISHING LURES - ONTARIO SOUTHWEST',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'FISHING LURES - ONTARIO EAST',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'FISHING LURES - GREAT LAKES',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'FISHING LURES - MARITIMES SOUTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'FISHING LURES - BC COASTAL',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'FISHING LURES - BC SOUTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'FISHING LURES - MARITIMES NORTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'FISHING LURES - NEWFOUNDLAND',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'FISHING LURES - SASKATCHEWAN',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'FISHING LURES - ONTARIO NORTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'FISHING LURES - ONTARIO SOUTHWEST',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'FISHING LURES - ONTARIO EAST',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'FISHING LURES - MANITOBA',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'FISHING LURES - MANITOBA',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'FISHING LURES - QUEBEC NORTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'FISHING LURES - QUEBEC NORTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'FISHING LURES - QUEBEC EAST',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'FISHING LURES - QUEBEC EAST',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'FISHING LURES - QUEBEC WEST',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FISHING LURES - QUEBEC WEST',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'FISHING LURES - QUEBEC WEST',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'EXERCISE AND BOXING NATIONAL',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'EXERCISE AND BOXING NATIONAL',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'O/S EXERCISE AND BOXING',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'A'},\n",
       " {'aisle_category': 'O/S EXERCISE AND BOXING',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'B'},\n",
       " {'aisle_category': 'O/S EXERCISE AND BOXING',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'O/S EXERCISE AND BOXING',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'AUTO ELECTRONICS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'HOME OFFICE SUPPLIES',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'A'},\n",
       " {'aisle_category': 'HOME OFFICE SUPPLIES',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'B'},\n",
       " {'aisle_category': 'HOME OFFICE SUPPLIES',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'HOME OFFICE SUPPLIES',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'BATTERIES',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'ICE FISHING - CANADA',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'A'},\n",
       " {'aisle_category': 'ICE FISHING - CANADA',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'B'},\n",
       " {'aisle_category': 'ICE FISHING - CANADA',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'SNACKS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'A'},\n",
       " {'aisle_category': 'SNACKS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'B'},\n",
       " {'aisle_category': 'SNACKS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'CAMPING ACCESSORIES',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'FISHING LURES - ALBERTA NORTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'FISHING LURES - ALBERTA NORTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'FISHING LURES - BC NORTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'FISHING LURES - ALBERTA SOUTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'KITCHEN TOOLS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'OPTICS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'A'},\n",
       " {'aisle_category': 'OPTICS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'B'},\n",
       " {'aisle_category': 'OPTICS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'OUTDOOR PLANTERS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'A'},\n",
       " {'aisle_category': 'OUTDOOR PLANTERS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'B'},\n",
       " {'aisle_category': 'OUTDOOR PLANTERS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'TEXTILES',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'A'},\n",
       " {'aisle_category': 'TEXTILES',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'B'},\n",
       " {'aisle_category': 'TEXTILES',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'ICE FISHING - CANADA',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'ICE FISHING - CANADA',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'FISHING LURES - BC NORTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'FISHING LURES - ALBERTA SOUTH',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'FLOOR COVERINGS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'B'},\n",
       " {'aisle_category': 'FLOOR COVERINGS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'FLOOR COVERINGS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'A'},\n",
       " {'aisle_category': 'FLOOR COVERINGS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'INDOOR PLANTERS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'INDOOR PLANTERS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'BENCH/STATIONARY POWER TOOLS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'A'},\n",
       " {'aisle_category': 'BENCH/STATIONARY POWER TOOLS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'B'},\n",
       " {'aisle_category': 'PARTY CITY CTR - BALLOON WEIGHTS AND LATEX BALLOONS BULK',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'PARTY CITY CTR - BALLOON WEIGHTS AND LATEX BALLOONS BULK',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'PARTY CITY CTR - BALLOON WEIGHTS AND LATEX BALLOONS BULK',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1, 1, 1],\n",
       "  'protopog_size': 'B'},\n",
       " {'aisle_category': 'PARTY CITY CTR - BALLOON WEIGHTS AND LATEX BALLOONS BULK',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'GENERATORS, PORTABLE POWER & RENEWABLE ENERGY',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'GARAGE ORGANIZATION',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'A'},\n",
       " {'aisle_category': 'WINTER SPECIALTY OILS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'A'},\n",
       " {'aisle_category': 'FLOOR COVERINGS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'D'},\n",
       " {'aisle_category': 'SKATES',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'PRO HOCKEY LIFE SKATES AND SKATE ACCESSORIES',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'A'},\n",
       " {'aisle_category': 'PAINT BRUSHES, ROLLERS AND TRAYS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1],\n",
       "  'protopog_size': 'E'},\n",
       " {'aisle_category': 'PARTY CITY CTR - BALLOON WEIGHTS AND LATEX BALLOONS BULK',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1, 1, 1],\n",
       "  'protopog_size': 'A'},\n",
       " {'aisle_category': 'SNACKS',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1, 1, 1, 1, 1],\n",
       "  'protopog_size': 'C'},\n",
       " {'aisle_category': 'PANTRIES/RTA',\n",
       "  'store_num': '1979',\n",
       "  'nb_segments': [1, 1, 1],\n",
       "  'protopog_size': 'D'}]"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# construct config_to_test dictionary per pog_id of interest\n",
    "def construct_configurations(tmp, display_df, pogsDf):\n",
    "    temp_df2 = tmp.groupby([\"pog_id\"]).apply(my_apply)\n",
    "    configs = []\n",
    "    for i, row in display_df.iterrows():\n",
    "        idx = row['combo_width']\n",
    "        num_pogs = len(idcs:=temp_df2[temp_df2==idx].index)\n",
    "        if row.num_widths>2 and num_pogs>0:\n",
    "            nb_segments = [1 for i in range(row.num_widths)]\n",
    "            for a_pog_id in idcs:\n",
    "                a_category, protopog_size = find_pog_details(a_pog_id, pogsDf)\n",
    "                configs.append(\n",
    "                    dict(aisle_category=a_category, store_num=\"1979\", nb_segments=nb_segments, protopog_size=protopog_size),\n",
    "                )\n",
    "    return configs\n",
    "\n",
    "configs = construct_configurations(tmp, display_df, pogsDf)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "b6631284",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(41749    AUTO ELECTRONICS\n",
       " Name: pog_subcat, dtype: object,\n",
       " 41749    C\n",
       " Name: pog_size, dtype: object)"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "    \n",
    "a_pog_id = idcs[0]\n",
    "pogsDf[pogsDf.pog_id == a_pog_id]\n",
    "protopog_size = pogsDf[pogsDf.pog_id == a_pog_id].pog_size\n",
    "a_category = pogsDf[pogsDf.pog_id == a_pog_id].pog_subcat\n",
    "a_category, protopog_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "c6710ef8-9d68-4a25-bdc2-d981a9039dbd",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:root:Some facing_group have a capnesting_flag style that is not currently supported: X_CAPPED, Z_CAPPED, or Y_CAPPED where base width!=capped width.  We read these facing groups but ignore the capped part so the representation is not fully accurate\n",
      "WARNING:root:The proto FISHING LURES - ONTARIO EAST A contains some CAPPED product that have the same orientation as the main orientation, this is a data issue\n",
      "WARNING:root:Some facing_group have a capnesting_flag style that is not currently supported: X_CAPPED, Z_CAPPED, or Y_CAPPED where base width!=capped width.  We read these facing groups but ignore the capped part so the representation is not fully accurate\n",
      "WARNING:root:The proto FISHING LURES - ONTARIO EAST B contains some CAPPED product that have the same orientation as the main orientation, this is a data issue\n",
      "WARNING:root:Some facing_group have a capnesting_flag style that is not currently supported: X_CAPPED, Z_CAPPED, or Y_CAPPED where base width!=capped width.  We read these facing groups but ignore the capped part so the representation is not fully accurate\n",
      "WARNING:root:The proto FISHING LURES - ONTARIO EAST C contains some CAPPED product that have the same orientation as the main orientation, this is a data issue\n",
      "WARNING:root:Some facing_group have a capnesting_flag style that is not currently supported: X_CAPPED, Z_CAPPED, or Y_CAPPED where base width!=capped width.  We read these facing groups but ignore the capped part so the representation is not fully accurate\n",
      "WARNING:root:The proto FISHING LURES - ONTARIO EAST D contains some CAPPED product that have the same orientation as the main orientation, this is a data issue\n",
      "INFO:root:Forecast df is 1367 rows for 1367 products requested\n"
     ]
    }
   ],
   "source": [
    "category1 = \"AUTO ELECTRONICS\"\n",
    "category2 = \"HOME OFFICE SUPPLIES\"\n",
    "\n",
    "solver_input = rd.load_solver_input(dp, \n",
    "#                                     aisle_category=\"AUTO ELECTRONICS\",\n",
    "                                    aisle_category=a_category,\n",
    "                                    store_num=\"1979\",\n",
    "                                    esl=False,\n",
    "                                    use_backend_reader=False, \n",
    "                                    load_multi_blocks_proto_geometry=True,\n",
    "                                    nb_segments=nb_segments,\n",
    "                                    protopog_size=protopog_size,\n",
    "                                    data_version='2023-10-05',\n",
    "                                   )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d839e12f-3d08-4a22-920e-19431a501b0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[AisleBlock(num_segments=1, height=54.0, depth=16.0, order=0, vendor_pegboard=None, segment_width=36.0),\n",
       " AisleBlock(num_segments=3, height=54.0, depth=16.0, order=1, vendor_pegboard=None, segment_width=48.0),\n",
       " AisleBlock(num_segments=2, height=54.0, depth=16.0, order=2, vendor_pegboard=None, segment_width=36.0)]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solver_input.geometry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ae10aa74-1a98-466d-aef2-bd3ea77a5381",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "DEBUG:matplotlib:matplotlib data path: /Users/dawn.duan/Library/CloudStorage/OneDrive-CanadianTire/Documents/tetris/ivado_or/tetris_3_10/lib/python3.10/site-packages/matplotlib/mpl-data\n",
      "DEBUG:matplotlib:CONFIGDIR=/Users/dawn.duan/.matplotlib\n",
      "DEBUG:matplotlib:interactive is False\n",
      "DEBUG:matplotlib:platform is darwin\n"
     ]
    }
   ],
   "source": [
    "import utilities.optimization.visualization.dashboard as d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f9136862-928c-48f3-8cf1-95b1bd18b2e6",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A [AisleBlock(num_segments=1, height=54.0, depth=16.0, order=0, vendor_pegboard=None, segment_width=36.0), AisleBlock(num_segments=2, height=54.0, depth=16.0, order=1, vendor_pegboard=None, segment_width=48.0), AisleBlock(num_segments=1, height=54.0, depth=16.0, order=2, vendor_pegboard=None, segment_width=36.0)]\n",
      "B [AisleBlock(num_segments=1, height=54.0, depth=16.0, order=0, vendor_pegboard=None, segment_width=36.0), AisleBlock(num_segments=2, height=54.0, depth=16.0, order=1, vendor_pegboard=None, segment_width=48.0), AisleBlock(num_segments=1, height=54.0, depth=16.0, order=2, vendor_pegboard=None, segment_width=36.0)]\n",
      "C [AisleBlock(num_segments=1, height=54.0, depth=16.0, order=0, vendor_pegboard=None, segment_width=36.0), AisleBlock(num_segments=2, height=54.0, depth=16.0, order=1, vendor_pegboard=None, segment_width=48.0), AisleBlock(num_segments=1, height=54.0, depth=16.0, order=2, vendor_pegboard=None, segment_width=36.0)]\n",
      "D [AisleBlock(num_segments=1, height=54.0, depth=16.0, order=0, vendor_pegboard=None, segment_width=36.0), AisleBlock(num_segments=2, height=54.0, depth=16.0, order=1, vendor_pegboard=None, segment_width=48.0), AisleBlock(num_segments=1, height=54.0, depth=16.0, order=2, vendor_pegboard=None, segment_width=36.0)]\n"
     ]
    }
   ],
   "source": [
    "for size, proto in solver_input.protopogs.items():\n",
    "    print(size, proto.geometry)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "8e32b4a8-10f1-4d9d-a556-b519ac50bf72",
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'd' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[144], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43md\u001b[49m\u001b[38;5;241m.\u001b[39membed_dashboard(solver_input, [], [], [], port\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m8855\u001b[39m, jupyter_mode \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mexternal\u001b[39m\u001b[38;5;124m\"\u001b[39m,)\u001b[38;5;66;03m# path_to_image_folder = \"/Users/philippegrangier/Tetris/compressed-sku-images/\")\u001b[39;00m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'd' is not defined"
     ]
    }
   ],
   "source": [
    "# d.embed_dashboard(solver_input, [], [], [], port=8855, jupyter_mode = \"external\",)# path_to_image_folder = \"/Users/philippegrangier/Tetris/compressed-sku-images/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "f126039c-f9e3-4ebe-a87f-cea7b698ff56",
   "metadata": {},
   "outputs": [],
   "source": [
    "from optimization.solver_entry_point import solve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "0c24d570",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[AisleBlock(num_segments=1, height=108.0, depth=16.0, order=0, vendor_pegboard=None, segment_width=48.0), AisleBlock(num_segments=1, height=108.0, depth=16.0, order=1, vendor_pegboard=None, segment_width=24.0), AisleBlock(num_segments=1, height=108.0, depth=16.0, order=2, vendor_pegboard=None, segment_width=48.0), AisleBlock(num_segments=1, height=108.0, depth=16.0, order=3, vendor_pegboard=None, segment_width=24.0)]\n"
     ]
    }
   ],
   "source": [
    "print(solver_input.geometry)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ab4afa7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "8cb754fc-4f37-4c3f-97f4-3878c6604aaf",
   "metadata": {},
   "source": [
    "In case you want to check one particular run"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "38a27bda-c65d-4b93-9bfb-aed2bf2ded84",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:root:The target geometry has 4 segments\n",
      "INFO:root:The protopog is automatically discretized into the subsections: [5, 1, 1, 1, 1]\n",
      "INFO:root:The subsections were concatenated into: [6, 1, 1, 1] to be compatible with the geometry of the store\n",
      "IOPub data rate exceeded.\n",
      "The notebook server will temporarily stop sending output\n",
      "to the client in order to avoid crashing it.\n",
      "To change this limit, set the config variable\n",
      "`--NotebookApp.iopub_data_rate_limit`.\n",
      "\n",
      "Current values:\n",
      "NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n",
      "NotebookApp.rate_limit_window=3.0 (secs)\n",
      "\n",
      "WARNING:root:No configuration exists for subsection 0 that has all proto fixtures types, it is likely to lead to some missing products in the final solution, but we have no other choice. This could be the consequence of a matching to a large proto or a dealer height adjustment\n",
      "DEBUG:root:The following subproblems will be solved for:\n",
      "DEBUG:root:Subsection 0 with 1 segment(s) with configuration S1\n",
      "DEBUG:root:Subsection 0 with 1 segment(s) with configuration S2\n",
      "DEBUG:root:Subsection 0 with 1 segment(s) with configuration S6\n",
      "DEBUG:root:Subsection 1 with 1 segment(s) with configuration S7\n",
      "DEBUG:root:Subsection 2 with 1 segment(s) with configuration S8\n",
      "DEBUG:root:Subsection 3 with 1 segment(s) with configuration S9\n",
      "INFO:root:4 subproblems to solve - we order them as follows:\n",
      "DEBUG:root:Solving for subsection 1 with 1 segment(s) with configuration S7\n",
      "DEBUG:root:Solving for subsection 2 with 1 segment(s) with configuration S8\n",
      "DEBUG:root:Solving for subsection 3 with 1 segment(s) with configuration S9\n",
      "DEBUG:root:Solving for subsection 0 with 1 segment(s) with configuration S2\n",
      "WARNING:root:A corner case has been reached where the pegboard has effectively no usable space. Values have been set to give a 0 area in y_min_max\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for *: 'NoneType' and 'float'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[142], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28mprint\u001b[39m(solver_input)\n\u001b[0;32m----> 2\u001b[0m res \u001b[38;5;241m=\u001b[39m \u001b[43msolve\u001b[49m\u001b[43m(\u001b[49m\u001b[43msolver_input\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/Library/CloudStorage/OneDrive-CanadianTire/Documents/tetris/ivado_or/tetris-api-worker/optimization/solver_entry_point.py:470\u001b[0m, in \u001b[0;36msolve\u001b[0;34m(solver_input, time_limit_in_second)\u001b[0m\n\u001b[1;32m    458\u001b[0m     parameters \u001b[38;5;241m=\u001b[39m replace(parameters, objective_evaluator\u001b[38;5;241m=\u001b[39mlexicographic_objective)\n\u001b[1;32m    460\u001b[0m \u001b[38;5;66;03m# ICE MELTERS, WINTER CHEMICALS, PAINT CHEMICALS, VACUUM BOTTLES AND THERMOS,\u001b[39;00m\n\u001b[1;32m    461\u001b[0m \u001b[38;5;66;03m# RESURFACERS, NAILS, HUNTING FOOTWEAR, HARDWIRE LIGHTING, BIRD BATHS, FOUNTAINS AND POND ACCESSORIES,\u001b[39;00m\n\u001b[1;32m    462\u001b[0m \u001b[38;5;66;03m# COOK AND FRY APPLIANCES, CITRONELLA, GOLF CLUBS, MUGS AND TEAPOTS, SEAT\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    467\u001b[0m \u001b[38;5;66;03m# AIR FRESHENERS, CLEANING CHEMICALS, PRESCHOOL TOYS, FOLDING PATIO & MUSKOKA CHAIRS\u001b[39;00m\n\u001b[1;32m    468\u001b[0m \u001b[38;5;66;03m# currently uses the default configuration with no change\u001b[39;00m\n\u001b[0;32m--> 470\u001b[0m fixtures, facing_groups, reason_for_missing_products, commented_products \u001b[38;5;241m=\u001b[39m \u001b[43mmaster_solve\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    471\u001b[0m \u001b[43m    \u001b[49m\u001b[43msolver_input\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msolver_input\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    472\u001b[0m \u001b[43m    \u001b[49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    473\u001b[0m \u001b[43m    \u001b[49m\u001b[43mproduct_assignment_mode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mproduct_assignment_mode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    474\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmax_attribute_level\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    475\u001b[0m \u001b[43m    \u001b[49m\u001b[43mproduct_fixture_order_mode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mproduct_fixture_order_mode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    476\u001b[0m \u001b[43m    \u001b[49m\u001b[43mjustification_mode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mjustification_mode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    477\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    479\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m SolverOutput(\n\u001b[1;32m    480\u001b[0m     fixtures\u001b[38;5;241m=\u001b[39mfixtures,\n\u001b[1;32m    481\u001b[0m     facing_groups\u001b[38;5;241m=\u001b[39mfacing_groups,\n\u001b[1;32m    482\u001b[0m     reason_for_missing_products\u001b[38;5;241m=\u001b[39mreason_for_missing_products,\n\u001b[1;32m    483\u001b[0m     commented_products\u001b[38;5;241m=\u001b[39mcommented_products,\n\u001b[1;32m    484\u001b[0m )\n",
      "File \u001b[0;32m~/Library/CloudStorage/OneDrive-CanadianTire/Documents/tetris/ivado_or/tetris-api-worker/optimization/optimizer/master_solver.py:921\u001b[0m, in \u001b[0;36mmaster_solve\u001b[0;34m(solver_input, parameters, product_assignment_mode, drop_low_performing_products_with_mip, max_attribute_level, n_jobs, restricted_configurations, justification_mode, product_fixture_order_mode, post_find_best_states, ordinal_levels, mid_optimization_states_exploration, fixture_mode)\u001b[0m\n\u001b[1;32m    918\u001b[0m solver_input\u001b[38;5;241m.\u001b[39mforecast[NON_MERCHANDISABLE] \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m\n\u001b[1;32m    919\u001b[0m solver_input\u001b[38;5;241m.\u001b[39morientation[NON_MERCHANDISABLE] \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m\n\u001b[0;32m--> 921\u001b[0m fixtures, facing_groups, reason_for_missing_products, commented_products \u001b[38;5;241m=\u001b[39m \u001b[43m_master_solve\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    922\u001b[0m \u001b[43m    \u001b[49m\u001b[43msolver_input\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msolver_input\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    923\u001b[0m \u001b[43m    \u001b[49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    924\u001b[0m \u001b[43m    \u001b[49m\u001b[43mobj_on_agg_subsection\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mobj_on_agg_subsection\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    925\u001b[0m \u001b[43m    \u001b[49m\u001b[43mproducts_by_subsection\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mproducts_by_subsection\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    926\u001b[0m \u001b[43m    \u001b[49m\u001b[43mproduct_friend\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mproduct_friend\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    927\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmax_attribute_level\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmax_attribute_level\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    928\u001b[0m \u001b[43m    \u001b[49m\u001b[43mn_jobs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mn_jobs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    929\u001b[0m \u001b[43m    \u001b[49m\u001b[43mrestricted_configurations\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrestricted_configurations\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    930\u001b[0m \u001b[43m    \u001b[49m\u001b[43mpost_find_best_states\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpost_find_best_states\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    931\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdrop_low_performing_products_with_mip\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdrop_low_performing_products_with_mip\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    932\u001b[0m \u001b[43m    \u001b[49m\u001b[43mjustification_mode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mjustification_mode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    933\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmid_optimization_states_exploration\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmid_optimization_states_exploration\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    934\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfixture_mode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfixture_mode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    935\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    937\u001b[0m \u001b[38;5;66;03m# Remove the temporary setup\u001b[39;00m\n\u001b[1;32m    938\u001b[0m solver_input\u001b[38;5;241m.\u001b[39mextra_attributes\u001b[38;5;241m.\u001b[39mpop(NON_MERCHANDISABLE)\n",
      "File \u001b[0;32m~/Library/CloudStorage/OneDrive-CanadianTire/Documents/tetris/ivado_or/tetris-api-worker/optimization/optimizer/master_solver.py:744\u001b[0m, in \u001b[0;36m_master_solve\u001b[0;34m(solver_input, parameters, obj_on_agg_subsection, products_by_subsection, product_friend, max_attribute_level, n_jobs, restricted_configurations, post_find_best_states, drop_low_performing_products_with_mip, mid_optimization_states_exploration, justification_mode, fixture_mode)\u001b[0m\n\u001b[1;32m    725\u001b[0m         all_results\u001b[38;5;241m.\u001b[39mappend(\n\u001b[1;32m    726\u001b[0m             solve_for_one_subsection(\n\u001b[1;32m    727\u001b[0m                 subsection\u001b[38;5;241m=\u001b[39minstance_parameters[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mconfiguration\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    740\u001b[0m             )\n\u001b[1;32m    741\u001b[0m         )\n\u001b[1;32m    743\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 744\u001b[0m     \u001b[43mfunc_timeout\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfunc_timeout\u001b[49m\u001b[43m(\u001b[49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtotal_time_limit_in_second\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msequential_master_solve\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    745\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m func_timeout\u001b[38;5;241m.\u001b[39mFunctionTimedOut:\n\u001b[1;32m    746\u001b[0m     logging\u001b[38;5;241m.\u001b[39minfo(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mMaster solve stopped after \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mparameters\u001b[38;5;241m.\u001b[39mtotal_time_limit_in_second\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[0;32m~/Library/CloudStorage/OneDrive-CanadianTire/Documents/tetris/ivado_or/tetris_3_10/lib/python3.10/site-packages/func_timeout/dafunc.py:108\u001b[0m, in \u001b[0;36mfunc_timeout\u001b[0;34m(timeout, func, args, kwargs)\u001b[0m\n\u001b[1;32m    105\u001b[0m     thread\u001b[38;5;241m.\u001b[39mjoin(\u001b[38;5;241m.5\u001b[39m)\n\u001b[1;32m    107\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m exception:\n\u001b[0;32m--> 108\u001b[0m     \u001b[43mraise_exception\u001b[49m\u001b[43m(\u001b[49m\u001b[43mexception\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    110\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ret:\n\u001b[1;32m    111\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m ret[\u001b[38;5;241m0\u001b[39m]\n",
      "File \u001b[0;32m~/Library/CloudStorage/OneDrive-CanadianTire/Documents/tetris/ivado_or/tetris_3_10/lib/python3.10/site-packages/func_timeout/py3_raise.py:7\u001b[0m, in \u001b[0;36mraise_exception\u001b[0;34m(exception)\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mraise_exception\u001b[39m(exception):\n\u001b[0;32m----> 7\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m exception[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28mNone\u001b[39m\n",
      "File \u001b[0;32m~/Library/CloudStorage/OneDrive-CanadianTire/Documents/tetris/ivado_or/tetris-api-worker/optimization/optimizer/master_solver.py:726\u001b[0m, in \u001b[0;36m_master_solve.<locals>.sequential_master_solve\u001b[0;34m()\u001b[0m\n\u001b[1;32m    723\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msequential_master_solve\u001b[39m():\n\u001b[1;32m    724\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m instance_parameters \u001b[38;5;129;01min\u001b[39;00m instances_to_solve:\n\u001b[1;32m    725\u001b[0m         all_results\u001b[38;5;241m.\u001b[39mappend(\n\u001b[0;32m--> 726\u001b[0m             \u001b[43msolve_for_one_subsection\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    727\u001b[0m \u001b[43m                \u001b[49m\u001b[43msubsection\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minstance_parameters\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mconfiguration\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    728\u001b[0m \u001b[43m                \u001b[49m\u001b[43mreference_subsection\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msolver_input\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mprotopog\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msubsections\u001b[49m\u001b[43m[\u001b[49m\u001b[43minstance_parameters\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43msub_indx\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    729\u001b[0m \u001b[43m                \u001b[49m\u001b[43msolver_input\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minstance_parameters\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43msolver_input\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    730\u001b[0m \u001b[43m                \u001b[49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    731\u001b[0m \u001b[43m                \u001b[49m\u001b[43mproducts_in_order_subsection\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minstance_parameters\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mproducts\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    732\u001b[0m \u001b[43m                \u001b[49m\u001b[43mtime_limit_in_second\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtotal_time_limit_in_second\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    733\u001b[0m \u001b[43m                \u001b[49m\u001b[43mproduct_friend\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minstance_parameters\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mproduct_friend\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    734\u001b[0m \u001b[43m                \u001b[49m\u001b[43mmax_attribute_level\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minstance_parameters\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mmax_attribute_level\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    735\u001b[0m \u001b[43m                \u001b[49m\u001b[43mdrop_low_performing_products_with_mip\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdrop_low_performing_products_with_mip\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    736\u001b[0m \u001b[43m                \u001b[49m\u001b[43mlog_level\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlogging_root_level\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    737\u001b[0m \u001b[43m                \u001b[49m\u001b[43mpost_find_best_states\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpost_find_best_states\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    738\u001b[0m \u001b[43m                \u001b[49m\u001b[43msegments_per_frozen_facing_groups\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msegments_per_frozen_facing_groups\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    739\u001b[0m \u001b[43m                \u001b[49m\u001b[43mmid_optimization_states_exploration\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmid_optimization_states_exploration\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    740\u001b[0m \u001b[43m            \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    741\u001b[0m         )\n",
      "File \u001b[0;32m~/Library/CloudStorage/OneDrive-CanadianTire/Documents/tetris/ivado_or/tetris-api-worker/optimization/optimizer/subproblem_solver.py:711\u001b[0m, in \u001b[0;36msolve_for_one_subsection\u001b[0;34m(subsection, reference_subsection, solver_input, parameters, products_in_order_subsection, product_friend, time_limit_in_second, max_attribute_level, drop_low_performing_products_with_mip, segments_per_frozen_facing_groups, preassigned_facing_groups, log_level, post_find_best_states, mid_optimization_states_exploration)\u001b[0m\n\u001b[1;32m    707\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m display_facing_groups:\n\u001b[1;32m    708\u001b[0m     \u001b[38;5;66;03m# If any, we add the display_facing_groups to the preassigned facing groups\u001b[39;00m\n\u001b[1;32m    709\u001b[0m     preassigned_facing_groups\u001b[38;5;241m.\u001b[39mextend(display_facing_groups)\n\u001b[0;32m--> 711\u001b[0m instance_single_subsection, reasons_for_missing_products \u001b[38;5;241m=\u001b[39m \u001b[43mpresolve_for_subsection\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    712\u001b[0m \u001b[43m    \u001b[49m\u001b[43msolver_input\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msolver_input\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    713\u001b[0m \u001b[43m    \u001b[49m\u001b[43mapply_top_shelves_logic\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply_top_shelves_logic\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    714\u001b[0m \u001b[43m    \u001b[49m\u001b[43mreference_subsection_in_proto\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mreference_subsection\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    715\u001b[0m \u001b[43m    \u001b[49m\u001b[43mactual_subsection\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msubsection\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    716\u001b[0m \u001b[43m    \u001b[49m\u001b[43mhblock_max_size\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmax_hblocking\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    717\u001b[0m \u001b[43m    \u001b[49m\u001b[43mvblock_max_size\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmax_vblocking\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    718\u001b[0m \u001b[43m    \u001b[49m\u001b[43mproducts_in_order_subsection\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mproducts_in_order_subsection\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    719\u001b[0m \u001b[43m    \u001b[49m\u001b[43madmissible_blocks_strategy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43madmissible_blocks_strategy\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    720\u001b[0m \u001b[43m    \u001b[49m\u001b[43mproduct_friend\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mproduct_friend\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    721\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmax_attribute_level\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmax_attribute_level\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    722\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdrop_low_performing_products_with_mip\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdrop_low_performing_products_with_mip\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    723\u001b[0m \u001b[43m    \u001b[49m\u001b[43msegments_per_frozen_facing_groups\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msegments_per_frozen_facing_groups\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    724\u001b[0m \u001b[43m    \u001b[49m\u001b[43muse_mip_to_filter_ab\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43muse_mip_to_filter_ab\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    725\u001b[0m \u001b[43m    \u001b[49m\u001b[43mis_postprocess_assortment_sweep\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpost_process\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m==\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mPostProcessFlavor\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mASSORTMENT_SWEEP\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    726\u001b[0m \u001b[43m    \u001b[49m\u001b[43mallow_side_facing\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mallow_side_facings\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    727\u001b[0m \u001b[43m    \u001b[49m\u001b[43mrelax_max_vblocking\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrelax_max_vblocking\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    728\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    730\u001b[0m \u001b[38;5;66;03m# initialize defaaultdict for product comments with list as default value\u001b[39;00m\n\u001b[1;32m    731\u001b[0m commented_products \u001b[38;5;241m=\u001b[39m defaultdict(\u001b[38;5;28mlist\u001b[39m)\n",
      "File \u001b[0;32m~/Library/CloudStorage/OneDrive-CanadianTire/Documents/tetris/ivado_or/tetris-api-worker/optimization/presolve.py:1952\u001b[0m, in \u001b[0;36mpresolve_for_subsection\u001b[0;34m(solver_input, apply_top_shelves_logic, reference_subsection_in_proto, actual_subsection, hblock_max_size, vblock_max_size, products_in_order_subsection, admissible_blocks_strategy, product_friend, max_attribute_level, drop_low_performing_products_with_mip, segments_per_frozen_facing_groups, use_mip_to_filter_ab, is_postprocess_assortment_sweep, allow_side_facing, relax_max_vblocking)\u001b[0m\n\u001b[1;32m   1944\u001b[0m instance\u001b[38;5;241m.\u001b[39mproducts_in_order \u001b[38;5;241m=\u001b[39m [p \u001b[38;5;28;01mfor\u001b[39;00m p \u001b[38;5;129;01min\u001b[39;00m instance\u001b[38;5;241m.\u001b[39mproducts_in_order \u001b[38;5;28;01mif\u001b[39;00m p\u001b[38;5;241m.\u001b[39mproduct_num \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m specialty_product_nums]\n\u001b[1;32m   1946\u001b[0m instance\u001b[38;5;241m.\u001b[39menforced_bincap \u001b[38;5;241m=\u001b[39m solver_input\u001b[38;5;241m.\u001b[39menforced_bincap\n\u001b[1;32m   1948\u001b[0m (\n\u001b[1;32m   1949\u001b[0m     unrestricted_admissible_blocks_by_product,\n\u001b[1;32m   1950\u001b[0m     admissible_blocks_by_product,\n\u001b[1;32m   1951\u001b[0m     product_nums_with_no_blocks,\n\u001b[0;32m-> 1952\u001b[0m ) \u001b[38;5;241m=\u001b[39m \u001b[43mfilter_admissible_blocks_for_products\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1953\u001b[0m \u001b[43m    \u001b[49m\u001b[43minstance\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1954\u001b[0m \u001b[43m    \u001b[49m\u001b[43madmissible_blocks_strategy\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1955\u001b[0m \u001b[43m    \u001b[49m\u001b[43msimple_admissible_blocks\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1956\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmax_attribute_level\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1957\u001b[0m \u001b[43m    \u001b[49m\u001b[43mvblock_max_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1958\u001b[0m \u001b[43m    \u001b[49m\u001b[43muse_mip_to_filter_ab\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1959\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1961\u001b[0m instance\u001b[38;5;241m.\u001b[39mproducts_in_order \u001b[38;5;241m=\u001b[39m [\n\u001b[1;32m   1962\u001b[0m     p \u001b[38;5;28;01mfor\u001b[39;00m p \u001b[38;5;129;01min\u001b[39;00m instance\u001b[38;5;241m.\u001b[39mproducts_in_order \u001b[38;5;28;01mif\u001b[39;00m p\u001b[38;5;241m.\u001b[39mproduct_num \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m product_nums_with_no_blocks\n\u001b[1;32m   1963\u001b[0m ]\n\u001b[1;32m   1965\u001b[0m instance\u001b[38;5;241m.\u001b[39munrestricted_admissible_blocks_by_product \u001b[38;5;241m=\u001b[39m unrestricted_admissible_blocks_by_product\n",
      "File \u001b[0;32m~/Library/CloudStorage/OneDrive-CanadianTire/Documents/tetris/ivado_or/tetris-api-worker/optimization/presolve.py:1398\u001b[0m, in \u001b[0;36mfilter_admissible_blocks_for_products\u001b[0;34m(instance, strategy, all_blocks, max_attribute_level, vblock_max_size, use_mip_to_filter_ab)\u001b[0m\n\u001b[1;32m   1364\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   1365\u001b[0m \u001b[38;5;124;03mGiven all the possible admissible blocks, filters them out to respect merchandising rules for each products.\u001b[39;00m\n\u001b[1;32m   1366\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1395\u001b[0m \n\u001b[1;32m   1396\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   1397\u001b[0m fixtures_y_clearance \u001b[38;5;241m=\u001b[39m _obtain_fixture_clearance(instance)\n\u001b[0;32m-> 1398\u001b[0m map_product_num_to_ideal_number_of_facings \u001b[38;5;241m=\u001b[39m \u001b[43m_compute_ideal_number_of_facings_pegboard\u001b[49m\u001b[43m(\u001b[49m\u001b[43minstance\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1400\u001b[0m _, _, max_hblocking_vblocking_product \u001b[38;5;241m=\u001b[39m identify_hblocking_vblocking(\n\u001b[1;32m   1401\u001b[0m     planogram\u001b[38;5;241m=\u001b[39minstance\u001b[38;5;241m.\u001b[39mprotopog,\n\u001b[1;32m   1402\u001b[0m     primary_orientation\u001b[38;5;241m=\u001b[39minstance\u001b[38;5;241m.\u001b[39morientation,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1405\u001b[0m     representative_products\u001b[38;5;241m=\u001b[39minstance\u001b[38;5;241m.\u001b[39mrepresentative_products,\n\u001b[1;32m   1406\u001b[0m )\n\u001b[1;32m   1408\u001b[0m filtering_functions: Dict[AdmissibleBlocksStrategy, List[Callable]] \u001b[38;5;241m=\u001b[39m {\n\u001b[1;32m   1409\u001b[0m     AdmissibleBlocksStrategy\u001b[38;5;241m.\u001b[39mFULL: [\n\u001b[1;32m   1410\u001b[0m         partial(\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1482\u001b[0m     ],\n\u001b[1;32m   1483\u001b[0m }\n",
      "File \u001b[0;32m~/Library/CloudStorage/OneDrive-CanadianTire/Documents/tetris/ivado_or/tetris-api-worker/optimization/presolve.py:2137\u001b[0m, in \u001b[0;36m_compute_ideal_number_of_facings_pegboard\u001b[0;34m(instance)\u001b[0m\n\u001b[1;32m   2126\u001b[0m     map_product_num_to_one_wos_area[product_num] \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m   2127\u001b[0m         (\n\u001b[1;32m   2128\u001b[0m             instance\u001b[38;5;241m.\u001b[39mforecast[product_num]\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   2133\u001b[0m         \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;241m0\u001b[39m\n\u001b[1;32m   2134\u001b[0m     )\n\u001b[1;32m   2136\u001b[0m \u001b[38;5;66;03m# we compute the total 2D available space on pegboards\u001b[39;00m\n\u001b[0;32m-> 2137\u001b[0m estimated_available_space_on_pegboards \u001b[38;5;241m=\u001b[39m \u001b[43minstance\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpegboard_utilization_ratio_from_proto\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43msum\u001b[39;49m\u001b[43m(\u001b[49m\n\u001b[1;32m   2138\u001b[0m \u001b[43m    \u001b[49m\u001b[43mf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mwidth\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43minstance\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpegboard_y_min_max\u001b[49m\u001b[43m[\u001b[49m\u001b[43mf\u001b[49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpegboard_y_max\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m-\u001b[39;49m\u001b[43m \u001b[49m\u001b[43minstance\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpegboard_y_min_max\u001b[49m\u001b[43m[\u001b[49m\u001b[43mf\u001b[49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpegboard_y_min\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2139\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43minstance\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mall_fixtures\u001b[49m\n\u001b[1;32m   2140\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtype\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m==\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mFixtureType\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mPEGBOARD\u001b[49m\n\u001b[1;32m   2141\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2143\u001b[0m \u001b[38;5;66;03m# Dictionary that will be fill up in the while loop. Initialized with products that do not fit depth.\u001b[39;00m\n\u001b[1;32m   2144\u001b[0m map_product_num_to_ideal_number_of_facings \u001b[38;5;241m=\u001b[39m {\n\u001b[1;32m   2145\u001b[0m     product_num: \u001b[38;5;241m0\u001b[39m\n\u001b[1;32m   2146\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m product_num, facing_bin_cap \u001b[38;5;129;01min\u001b[39;00m map_product_num_to_facing_bin_cap\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m   2147\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m facing_bin_cap \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m\n\u001b[1;32m   2148\u001b[0m }\n",
      "\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for *: 'NoneType' and 'float'"
     ]
    }
   ],
   "source": [
    "print(solver_input.geometry)\n",
    "res = solve(solver_input)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3372498d-4ca4-423c-b82c-c8c82f85b434",
   "metadata": {},
   "source": [
    "And multiple runs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "d23ebbfd-8941-4367-9066-afc11ac7016a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from joblib import Parallel, delayed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "d8fbcc4f-d340-4e02-95e8-1599c59e9567",
   "metadata": {},
   "outputs": [],
   "source": [
    "def my_run_function(**config_dict) -> dict:\n",
    "    \"\"\"\n",
    "    The output is is meant to match what the dashboard was expecting with experiment tools\n",
    "    \"\"\"\n",
    "    try:\n",
    "        solver_input = rd.load_solver_input(data_path=dp,\n",
    "                                            use_backend_reader=False, \n",
    "                                            esl=False,\n",
    "                                            load_multi_blocks_proto_geometry=True,\n",
    "                                            **config_dict)\n",
    "        \n",
    "        local_res = solve(solver_input)\n",
    "\n",
    "        return dict(solver_input=solver_input, \n",
    "                    fixtures=local_res.fixtures, \n",
    "                    facing_groups=local_res.facing_groups, \n",
    "                    reason_for_missing_products=local_res.reason_for_missing_products)\n",
    "    except Exception as e:\n",
    "        print(e)\n",
    "        return dict()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1647cc7-089b-47c3-a6a3-e3b2e8ad2cf6",
   "metadata": {},
   "source": [
    "To debug which one have crashed, you will obtain an empty dict.\n",
    "\n",
    "If you want to know more you can also run with n_jobs=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "040ebf41",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'aisle_category': 'AUTO ELECTRONICS',\n",
       "  'nb_segments': [1, 3, 1],\n",
       "  'protopog_size': 'C',\n",
       "  'store_num': '1979'},\n",
       " {'aisle_category': 'AUTO ELECTRONICS',\n",
       "  'nb_segments': [1, 3, 2],\n",
       "  'protopog_size': 'C',\n",
       "  'store_num': '1979'},\n",
       " {'aisle_category': 'HOME OFFICE SUPPLIES',\n",
       "  'nb_segments': [1, 3, 1],\n",
       "  'protopog_size': 'C',\n",
       "  'store_num': '1979'},\n",
       " {'aisle_category': 'HOME OFFICE SUPPLIES',\n",
       "  'nb_segments': [1, 3, 2],\n",
       "  'protopog_size': 'C',\n",
       "  'store_num': '1979'}]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import ParameterGrid\n",
    "category1 = \"AUTO ELECTRONICS\"\n",
    "category2 = \"HOME OFFICE SUPPLIES\"\n",
    "param_grid ={ \n",
    "    'aisle_category':[category1, category2],\n",
    "    'store_num':[\"1979\"], \n",
    "    'nb_segments':[[1,3,1],[1,3,2]], \n",
    "    'protopog_size':[\"C\"]\n",
    "}\n",
    "list(ParameterGrid(param_grid))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "7a78b002-9367-42fe-babf-3a048013122c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{}, {}]"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "configs_to_test= [\n",
    "    dict(aisle_category=category1, store_num=\"1979\", nb_segments=[1,3,1], protopog_size=\"C\"),\n",
    "    dict(aisle_category=category1, store_num=\"1979\", nb_segments=[1,3,2], protopog_size=\"C\"),\n",
    "]\n",
    "\n",
    "all_res = Parallel(n_jobs=2)(delayed(my_run_function)(**d) for d in configs_to_test)\n",
    "all_res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "12e8dfa1-f0f6-4ca4-beca-259b088a7376",
   "metadata": {},
   "outputs": [],
   "source": [
    "d.embed_dashboard(exp_tool_results=all_res, port=8855, jupyter_mode = \"external\",)# path_to_image_folder = \"/Users/philippegrangier/Tetris/compressed-sku-images/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3c18c23",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
